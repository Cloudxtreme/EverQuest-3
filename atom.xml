<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>后乐</title>
  
  <subtitle>柴门闻犬吠，风雪夜归人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sophoraflower.github.io/EverQuest/"/>
  <updated>2018-02-28T15:18:29.003Z</updated>
  <id>https://sophoraflower.github.io/EverQuest/</id>
  
  <author>
    <name>ZiZhi Cao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL基础之二篇</title>
    <link href="https://sophoraflower.github.io/EverQuest/2018/0226/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8C%E7%AF%87/"/>
    <id>https://sophoraflower.github.io/EverQuest/2018/0226/MySQL基础之二篇/</id>
    <published>2018-02-26T06:40:00.000Z</published>
    <updated>2018-02-28T15:18:29.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h3><h4 id="MySQL服务安装及命令使用"><a href="#MySQL服务安装及命令使用" class="headerlink" title="MySQL服务安装及命令使用"></a>MySQL服务安装及命令使用</h4><ul><li><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MySQL-基础&quot;&gt;&lt;a href=&quot;#MySQL-基础&quot; class=&quot;headerlink&quot; title=&quot;MySQL 基础&quot;&gt;&lt;/a&gt;MySQL 基础&lt;/h3&gt;&lt;h4 id=&quot;MySQL服务安装及命令使用&quot;&gt;&lt;a href=&quot;#MySQL服务安装及命令使用&quot;
      
    
    </summary>
    
      <category term="计算机基础" scheme="https://sophoraflower.github.io/EverQuest/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="MySQL" scheme="https://sophoraflower.github.io/EverQuest/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://sophoraflower.github.io/EverQuest/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之三篇</title>
    <link href="https://sophoraflower.github.io/EverQuest/2018/0226/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%B8%89%E7%AF%87/"/>
    <id>https://sophoraflower.github.io/EverQuest/2018/0226/MySQL基础之三篇/</id>
    <published>2018-02-26T06:40:00.000Z</published>
    <updated>2018-02-26T06:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h3><p>  ​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MySQL-基础&quot;&gt;&lt;a href=&quot;#MySQL-基础&quot; class=&quot;headerlink&quot; title=&quot;MySQL 基础&quot;&gt;&lt;/a&gt;MySQL 基础&lt;/h3&gt;&lt;p&gt;  ​&lt;/p&gt;

      
    
    </summary>
    
      <category term="计算机基础" scheme="https://sophoraflower.github.io/EverQuest/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="MySQL" scheme="https://sophoraflower.github.io/EverQuest/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://sophoraflower.github.io/EverQuest/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之一篇</title>
    <link href="https://sophoraflower.github.io/EverQuest/2018/0222/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%B8%80%E7%AF%87/"/>
    <id>https://sophoraflower.github.io/EverQuest/2018/0222/MySQL基础之一篇/</id>
    <published>2018-02-22T01:41:00.000Z</published>
    <updated>2018-02-24T10:02:55.107Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h3><h4 id="MySQL-介绍"><a href="#MySQL-介绍" class="headerlink" title="MySQL 介绍"></a>MySQL 介绍</h4><ul><li><p><strong>数据库（Database）</strong>是按照数据结构来组织、存储和管理数据的仓库，用于记录数据，使用数据库记录数据可以表现出各种数据间的联系，也可以很方便地对所记录的数据进行增、删、改、查等操作</p></li><li><p><strong>结构化查询语言(Structured Query Language)</strong>简称 <strong>SQL</strong>，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名</p></li><li><p><strong>MySQL</strong> 是一个 <strong>DBMS（数据库管理系统）</strong>， 最流行的关系型数据库管理系统（关系数据库，是建立在关系数据库模型基础上的数据库，借助于集合代数等概念和方法来处理数据库中的数据）。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发者都选择 MySQL 作为网站数据库。MySQL 使用 SQL 语言进行操作</p></li><li><p>基本命令</p><ul><li><p>启动MySQL服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start;</span><br></pre></td></tr></table></figure></li><li><p>使用root用户登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure></li><li><p>查看数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li><li><p>连接数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use &lt;数据库名&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>新建数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure></li><li><p>新建数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employee (id int(10), name char(20), phone int(12));</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employee(id,name,phone) VALUES(01,&apos;Tom&apos;,110110110);</span><br><span class="line">INSERT INTO employee VALUES(02,&apos;Jack&apos;,119119119);</span><br><span class="line">INSERT INTO employee(id,name) VALUES(03,&apos;Rose&apos;);</span><br></pre></td></tr></table></figure><p><img src="https://dn-anything-about-doc.qbox.me/MySQL/sql-02-07.png" alt="mysql-001"></p></li></ul></li><li><p>数据类型</p><p>| 数据类型    | 大小(字节)  | 用途       | 格式                |<br>| ——- | ——- | ——– | —————– |<br>| INT     | 4       | 整数       |                   |<br>| FLOAT   | 4       | 单精度浮点数   |                   |<br>| DOUBLE  | 8       | 双精度浮点数   |                   |<br>| ENUM    |         | 单选,比如性别  | ENUM(‘a’,’b’,’c’) |<br>| SET     |         | 多选       | SET(‘1’,’2’,’3’)  |<br>| DATE    | 3       | 日期       | HH:MM:SS          |<br>| TIME    | 3       | 时间点或持续时间 | YYYY-MM-DD        |<br>| YEAR    | 1       | 年份值      | YYYY              |<br>| CHAR    | 0~255   | 定长字符串    |                   |<br>| VARCHAR | 0~255   | 变长字符串    |                   |<br>| TEXT    | 0~65535 | 长文本数据    |                   |</p><p>参考文章：<a href="http://blog.csdn.net/anxpp/article/details/51284106#comments" target="_blank" rel="noopener">MySQL 中的数据类型介绍</a></p><p>​</p></li></ul><h4 id="SQL-的约束"><a href="#SQL-的约束" class="headerlink" title="SQL 的约束"></a>SQL 的约束</h4><ul><li><p>示例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE test_code;</span><br><span class="line"></span><br><span class="line">use test_code;</span><br><span class="line"></span><br><span class="line">CREATE TABLE department</span><br><span class="line">(</span><br><span class="line">  dpt_name   CHAR(20) NOT NULL,</span><br><span class="line">  people_num INT(10) DEFAULT &apos;10&apos;,</span><br><span class="line">  CONSTRAINT dpt_pk PRIMARY KEY (dpt_name)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line">CREATE TABLE employee</span><br><span class="line">(</span><br><span class="line">  id      INT(10) PRIMARY KEY,</span><br><span class="line">  name    CHAR(20),</span><br><span class="line">  age     INT(10),</span><br><span class="line">  salary  INT(10) NOT NULL,</span><br><span class="line">  phone   INT(12) NOT NULL,</span><br><span class="line">  in_dpt  CHAR(20) NOT NULL,</span><br><span class="line">  UNIQUE  (phone),</span><br><span class="line">  CONSTRAINT emp_fk FOREIGN KEY (in_dpt) REFERENCES department(dpt_name)</span><br><span class="line"> );</span><br><span class="line"> </span><br><span class="line">CREATE TABLE project</span><br><span class="line">(</span><br><span class="line">  proj_num   INT(10) NOT NULL,</span><br><span class="line">  proj_name  CHAR(20) NOT NULL,</span><br><span class="line">  start_date DATE NOT NULL,</span><br><span class="line">  end_date   DATE DEFAULT &apos;2015-04-01&apos;,</span><br><span class="line">  of_dpt     CHAR(20) REFERENCES department(dpt_name),</span><br><span class="line">  CONSTRAINT proj_pk PRIMARY KEY (proj_num,proj_name)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure></li><li><p>主键(PRIMARY KEY)：用于约束表中的一行，作为这一行的唯一标识符，在一张表中通过主键就能准确定位到一行，因此主键十分重要。主键不能有重复且不能为空</p></li><li><p>默认值约束(DEFAULT)：当有 DEFAULT 约束的列，插入数据为空时，将使用默认值</p></li><li><p>唯一约束 (UNIQUE)：它规定一张表中指定的一列的值必须不能有重复值，即这一列每个值都是唯一的</p></li><li><p>外键 (FOREIGN KEY)： 既能确保数据完整性，也能表现表之间的关系。  一个表可以有多个外键，每个外键必须 REFERENCES (参考) 另一个表的主键，被外键约束的列，取值必须在它参考的列中有对应值</p></li><li><p>非空约束 (NOT NULL)：被非空约束的列，在插入值时必须非空</p></li></ul><h4 id="SELECT语句详解"><a href="#SELECT语句详解" class="headerlink" title="SELECT语句详解"></a>SELECT语句详解</h4><ul><li><p>基本的SELECT语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 要查询的列名 FROM 表名字 WHERE 限制条件；</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age FROM employee;</span><br><span class="line">SELECT name,age FROM employee WHERE age&gt;25;</span><br><span class="line">SELECT name,age FROM employee WHERE name=&apos;Mary&apos;;</span><br><span class="line">SELECT name,age FROM employee WHERE age&lt;25 OR age&gt;30;</span><br><span class="line">SELECT name,age FROM employee WHERE age&gt;25 AND age&gt;30;</span><br><span class="line">SELECT name,age FROM employee WHERE age BETWEEN 25 AND 30;</span><br><span class="line">SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt IN (&apos;dpt3&apos;,&apos;dpt4&apos;);</span><br><span class="line">SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt NOT IN (&apos;dpt1&apos;,&apos;dpt3&apos;);</span><br><span class="line">SELECT name,age,phone FROM employee WHERE phone LIKE &apos;1101__&apos;;</span><br><span class="line">SELECT name,age,phone FROM employee WHERE name LIKE &apos;J%&apos;;</span><br><span class="line">SELECT name,age,salary,phone FROM employee ORDER BY salary DESC;</span><br><span class="line">SELECT name,age,salary,phone FROM employee ORDER BY salary ASC;</span><br></pre></td></tr></table></figure><p>SQL 内置函数和计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">COUNT 计数</span><br><span class="line">SUM 求和</span><br><span class="line">AVG 求平均值</span><br><span class="line">MAX 最大值</span><br><span class="line">MIN 最小值</span><br><span class="line"># 其中 COUNT 函数可用于任何数据类型(因为它只是计数)，而 SUM 、AVG 函数都只能对数字类数据类型做计算，MAX 和 MIN 可用于数值、字符串或是日期时间数据类型。</span><br><span class="line">SELECT MAX(salary) AS max_salary,MIN(salary) FROM employee;</span><br><span class="line"># 注：使用AS关键词可以给值重命名</span><br></pre></td></tr></table></figure><p>子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 要知道名为 &quot;Tom&quot; 的员工所在部门做了几个工程。员工信息储存在 employee 表中，但工程信息储存在project 表中。</span><br><span class="line">SELECT of_dpt, COUNT(proj_name) AS count_project FROM project</span><br><span class="line">WHERE of_dpt IN </span><br><span class="line">(SELECT in_dpt FROM employee WHERE name=&apos;Tom&apos;);</span><br></pre></td></tr></table></figure><p>连接查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询出的是，各员工所在部门的人数，其中员工的 id 和 name 来自 employee 表，people_num 来自 department 表</span><br><span class="line">SELECT id,name,people_num</span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.in_dpt = department.in_dpt</span><br><span class="line">ORDER BY id;</span><br><span class="line"># 或者</span><br><span class="line">SELECT id,name,people_num </span><br><span class="line">FROM employee JOIN department </span><br><span class="line">ON employee.in_dpt = department.dpt_name </span><br><span class="line">ORDER BY id;</span><br></pre></td></tr></table></figure></li></ul><h4 id="修改和删除"><a href="#修改和删除" class="headerlink" title="修改和删除"></a>修改和删除</h4><ul><li><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE XXX;</span><br><span class="line">DROP TABLE 表名字;</span><br></pre></td></tr></table></figure></li><li><p>重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE 原名 TO 新名字;  </span><br><span class="line">ALTER TABLE 原名 RENAME 新名;  </span><br><span class="line">ALTER TABLE 原名 RENAME TO 新名;</span><br></pre></td></tr></table></figure></li><li><p>对表结构修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ALTER TABLE 表名字 ADD COLUMN 列名字 数据类型 约束;</span><br><span class="line"># 或者 ALTER TABLE 表名字 ADD 列名字 数据类型 约束;</span><br><span class="line">ALTER TABLE employee ADD height INT(4) DEFAULT 170;</span><br><span class="line">ALTER TABLE employee ADD weight INT(4) DEFAULT 170 AFTER age;</span><br><span class="line">ALTER TABLE employee ADD test INT(10) DEFAULT 11 FIRST;</span><br></pre></td></tr></table></figure></li><li><p>删除一列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 DROP COLUMN 列名字;  </span><br><span class="line">或： ALTER TABLE 表名字 DROP 列名字;</span><br><span class="line">ALTER TABLE employee DROP test;</span><br></pre></td></tr></table></figure></li><li><p>重命名一列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 CHANGE 原列名 新列名 数据类型 约束;</span><br><span class="line">ALTER TABLE employee CHANGE height shengao INT(4) DEFAULT 170;</span><br></pre></td></tr></table></figure></li><li><p>改变数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 MODIFY 列名字 新数据类型;</span><br></pre></td></tr></table></figure></li><li><p>对表的内容修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名字 SET 列1=值1,列2=值2 WHERE 条件;</span><br><span class="line">UPDATE employee SET age=21, salary=3000 WHERE name=&apos;Tom&apos;;</span><br><span class="line">DELETE FROM 表名字 WHERE 条件;</span><br><span class="line">DELETE FROM employee WHERE name=&apos;Tom&apos;;</span><br></pre></td></tr></table></figure></li></ul><p>####其他基本操作</p><ul><li><p>索引：可以加快查询速度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 ADD INDEX 索引名 (列名);  </span><br><span class="line">CREATE INDEX 索引名 ON 表名字 (列名);</span><br><span class="line">ALTER TABLE employee ADD INDEX idx_id (id);  # 在employee表的id列上建立名为idx_id的索引  </span><br><span class="line">CREATE INDEX idx_name ON employee (name);   # 在employee表的name列上建立名为idx_name的索引</span><br></pre></td></tr></table></figure></li><li><p>视图：是一种虚拟存在的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名(列a,列b,列c) AS SELECT 列1,列2,列3 FROM 表名字;</span><br></pre></td></tr></table></figure></li><li><p>导入：从文件中导入数据到表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA INFILE &apos;文件路径和文件名&apos; INTO TABLE 表名字;</span><br><span class="line">LOAD DATA INFILE &apos;/tmp/SQL6/in.txt&apos; INTO TABLE employee;</span><br></pre></td></tr></table></figure></li><li><p>导出：从表中导出到文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列1，列2 INTO OUTFILE &apos;文件路径和文件名&apos; FROM 表名字;</span><br><span class="line">SELECT * INTO OUTFILE &apos;/tmp/out.txt&apos; FROM employee;</span><br></pre></td></tr></table></figure></li><li><p>备份：mysqldump 备份数据库到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 备份与导出的区别：导出的文件只是保存数据库中的数据；而备份，则是把数据库的结构，包括数据、约束、索引、视图等全部另存为一个文件。</span><br><span class="line">mysqldump -u root 数据库名&gt;备份文件名;   # 备份整个数据库  </span><br><span class="line">mysqldump -u root 数据库名 表名字&gt;备份文件名;  # 备份整个表</span><br><span class="line">mysqldump -u root mysql_shiyan &gt; bak.sql;</span><br></pre></td></tr></table></figure></li><li><p>恢复：从文件恢复数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source /tmp/SQL6/MySQL-06.sql</span><br><span class="line">mysql -u root          #因为在上一步已经退出了MySQL，现在需要重新登</span><br><span class="line">CREATE DATABASE test;  # 新建一个名为test的数据库</span><br><span class="line"># 再次 Ctrl+Z 退出MySQL，然后输入语句进行恢复，把刚才备份的 bak.sql 恢复到 test 数据库</span><br><span class="line">mysql -u root test &lt; bak.sql</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MySQL-基础&quot;&gt;&lt;a href=&quot;#MySQL-基础&quot; class=&quot;headerlink&quot; title=&quot;MySQL 基础&quot;&gt;&lt;/a&gt;MySQL 基础&lt;/h3&gt;&lt;h4 id=&quot;MySQL-介绍&quot;&gt;&lt;a href=&quot;#MySQL-介绍&quot; class=&quot;head
      
    
    </summary>
    
      <category term="计算机基础" scheme="https://sophoraflower.github.io/EverQuest/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="MySQL" scheme="https://sophoraflower.github.io/EverQuest/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://sophoraflower.github.io/EverQuest/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python问题汇总-201802</title>
    <link href="https://sophoraflower.github.io/EverQuest/2018/0201/Python%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB-201802/"/>
    <id>https://sophoraflower.github.io/EverQuest/2018/0201/Python问题汇总-201802/</id>
    <published>2018-02-01T08:16:16.000Z</published>
    <updated>2018-02-06T22:25:57.520Z</updated>
    
    <content type="html"><![CDATA[<h4 id="20180206"><a href="#20180206" class="headerlink" title="20180206"></a>20180206</h4><ul><li><p>格式化输出json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(obj, fp, ensure_ascii, indent)</span><br><span class="line">// obj json输出结果或者json文件</span><br><span class="line">// fp 文件句柄</span><br><span class="line">// ensure_ascii 设置为<span class="keyword">False</span>,可以把中文以中文的形式输出显示或存到文件里</span><br><span class="line">// indent 缩进的空格数，设置为非零值时，就起到了格式化的效果</span><br></pre></td></tr></table></figure></li><li><p>configparser模块：</p></li></ul><p>&emsp;&emsp;This module provides the <a href="https://docs.python.org/3/library/configparser.html#configparser.ConfigParser" target="_blank" rel="noopener"><code>ConfigParser</code></a> class which implements a basic configuration language which provides a structure similar to what’s found in Microsoft Windows INI files.  You can use this to write Python programs which can be customized by end users easily.</p><p>&emsp;&emsp;参考文章</p><p>&emsp;&emsp;<a href="http://blog.csdn.net/u014453898/article/details/53544144" target="_blank" rel="noopener">《python3 用ConfigParser包处理 ini文件》</a></p><p>&emsp;&emsp;<a href="http://blog.csdn.net/willhuo/article/details/49512557" target="_blank" rel="noopener">《如何使用Python3读写INI配置文件》</a></p><p>&emsp;&emsp;示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; config.ini</span></span><br><span class="line"><span class="comment">; PC Online</span></span><br><span class="line"><span class="section">[HTTP_PC]</span></span><br><span class="line">base_url : https://www.xxx.tv/</span><br><span class="line"></span><br><span class="line"><span class="comment">; PC Beta</span></span><br><span class="line"><span class="section">[HTTP_Beta]</span></span><br><span class="line">beta_base_url : https://beta.xxx.tv/</span><br><span class="line"></span><br><span class="line"><span class="comment">; Mobile Online</span></span><br><span class="line"><span class="section">[HTTP_Mobile]</span></span><br><span class="line">mobile_base_url : https://apis.xxx.tv/</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">configPath = os.path.abspath(os.curdir) + <span class="string">'\\testConfig\\config.ini'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadConfig</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造函数，读取配置文件(config.ini)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.config = configparser.ConfigParser()</span><br><span class="line">        self.config.read(configPath)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_http_pc</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        value = self.config.get(<span class="string">"HTTP_PC"</span>, name)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_http_beta</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        value = self.config.get(<span class="string">"HTTP_Beta"</span>, name)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_http_mobile</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        value = self.config.get(<span class="string">"HTTP_Mobile"</span>, name)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    config = ReadConfig()</span><br><span class="line">    self.base = config.get_http_pc(name=<span class="string">"base_url"</span>) // https://www.xxx.tv/ </span><br><span class="line">    self.url = self.base + <span class="string">'api/user/profile'</span></span><br><span class="line">    print(<span class="string">'**** '</span> + self.url + <span class="string">' ****'</span>)</span><br></pre></td></tr></table></figure><h4 id="20180207"><a href="#20180207" class="headerlink" title="20180207"></a>20180207</h4><h4 id="20180208"><a href="#20180208" class="headerlink" title="20180208"></a>20180208</h4><h4 id="20180209"><a href="#20180209" class="headerlink" title="20180209"></a>20180209</h4><h4 id="……"><a href="#……" class="headerlink" title="……"></a>……</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;20180206&quot;&gt;&lt;a href=&quot;#20180206&quot; class=&quot;headerlink&quot; title=&quot;20180206&quot;&gt;&lt;/a&gt;20180206&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;格式化输出json&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="Python" scheme="https://sophoraflower.github.io/EverQuest/categories/Python/"/>
    
      <category term="杂烩" scheme="https://sophoraflower.github.io/EverQuest/categories/Python/%E6%9D%82%E7%83%A9/"/>
    
    
      <category term="python" scheme="https://sophoraflower.github.io/EverQuest/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶知识汇总</title>
    <link href="https://sophoraflower.github.io/EverQuest/2018/0131/Java%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
    <id>https://sophoraflower.github.io/EverQuest/2018/0131/Java进阶知识汇总/</id>
    <published>2018-01-31T14:38:00.000Z</published>
    <updated>2018-01-31T14:43:19.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java-类与对象"><a href="#Java-类与对象" class="headerlink" title="Java 类与对象"></a>Java 类与对象</h3><ul><li><p>面向对象：体现的是人所关注对象的信息聚集在了一个具体的物体上，通过对象的属性和行为来了解对象</p></li><li><p>类：封装对象的属性和行为的载体，具有相同属性和方法（行为）的对象的集合</p></li><li><p>类就是对象的抽象(或者模板)，对象就是类的具体（或者实例）</p></li><li><p>定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="comment">//定义属性部分（成员变量）</span></span><br><span class="line">    属性<span class="number">1</span>的类型 属性<span class="number">1</span>;</span><br><span class="line">    属性<span class="number">2</span>的类型 属性<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//定义方法部分</span></span><br><span class="line">    方法<span class="number">1</span>;</span><br><span class="line">    方法<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型变量</p><ul><li>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li>类变量：也叫静态变量，类变量也声明在类中，方法体之外，但必须声明为static类型。</li></ul></li><li><p>构造方法：</p><ul><li><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与类名相同，可以指定参数，没有返回值</span></span><br><span class="line"><span class="keyword">public</span> 构造方法名()&#123;</span><br><span class="line">  <span class="comment">// 初始化代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 属性（成员变量）</span></span><br><span class="line">  <span class="keyword">double</span> height;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 构造函数，初始化属性</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">People</span> <span class="params">(<span class="keyword">double</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    height = a;</span><br><span class="line">    age = b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">People MiaoMiao = <span class="keyword">new</span> People(<span class="number">174</span>, <span class="number">29</span>);</span><br></pre></td></tr></table></figure></li><li><p>在定义类的时候没有写构造方法，系统会默认给我们生成一个无参构造方法</p></li><li><p>构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应的方法</p></li></ul></li><li><p>对象</p><ul><li><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure></li><li><p>使用对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用对象属性</span></span><br><span class="line">对象名.属性</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用对象方法</span></span><br><span class="line">对象名.方法</span><br></pre></td></tr></table></figure></li><li><p>作用域：变量的生存期或者作用范围，局部变量有更高的优先级</p></li></ul></li></ul><h3 id="Java-封装"><a href="#Java-封装" class="headerlink" title="Java 封装"></a>Java 封装</h3><ul><li><p>封装：封装是指，一种将抽象性函式接口的实例细节部份包装、隐藏起来的方法。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制，通过该类提供的方法来实现对隐藏信息的操作和访问</p><ul><li>只能通过规定的方法访问数据</li><li>隐藏类的实例细节，方便修改和实现</li></ul></li><li><p>实现</p><p><img src="https://www.2cto.com/uploadfile/Collfiles/20160730/20160730092630985.jpg" alt="封装"></p><ul><li><p>封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置getter和setter方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> newHeight)</span></span>&#123;</span><br><span class="line">    height = newHeight;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldPeople</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    People MiaoMiao = <span class="keyword">new</span> People();</span><br><span class="line">    MiaoMiao.setHeight(<span class="number">175.0</span>);</span><br><span class="line">    System.out.println(<span class="string">"MiaoMiao的身高是"</span>+MiaoMiao.getHeight());</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>包机制：区别类名的命名空间</p><ul><li><p>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用</p></li><li><p>包采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别</p></li><li><p>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类</p></li><li><p>定义和使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名</span><br><span class="line"><span class="keyword">import</span> com.zhanqi.zhubo</span><br><span class="line"><span class="keyword">import</span> com.zhanqi.*</span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问修饰符</p><ul><li>private修饰的属性或者方法，只能在当前类中访问或者使用</li><li>默认是什么修饰符都不加，默认在当前类中和同一包下都可以访问和使用</li><li>protected修饰的属性或者方法，对同一包内的类和所有子类可见</li><li>public修饰的属性或者方法，对所有类可见。</li></ul></li><li><p>this 关键字：代表当前对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内部类</p><ul><li><p>作用</p><ul><li>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类</li><li>内部类的方法可以直接访问外部类的所有数据，包括私有的数据</li><li>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便</li><li>内部类允许继承多个非接口类型</li><li>内部类的成员变量/方法名可以和外部类的相同</li></ul></li><li><p>成员内部类、静态内部类、局部内部类、匿名内部类</p><p>参考文章：</p><ul><li><a href="http://blog.51cto.com/android/384844" target="_blank" rel="noopener">Java内部类的使用小结</a></li><li><a href="http://www.cnblogs.com/nerxious/archive/2013/01/25/2876489.html" target="_blank" rel="noopener">java中的匿名内部类总结</a></li><li><a href="http://blog.csdn.net/fgakjfd/article/details/5282646#comments" target="_blank" rel="noopener">静态内部类和非静态内部类的区别</a></li></ul></li></ul><p>​</p></li></ul><h3 id="Java-继承"><a href="#Java-继承" class="headerlink" title="Java 继承"></a>Java 继承</h3><ul><li><p>继承定义</p><ul><li><p>继承可以看成是类与类之间的衍生关系，父类更通用，子类更具体</p></li><li><p>创建一个类来继承某一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span></span><br><span class="line"><span class="class">// <span class="title">E</span>.<span class="title">G</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> legNum;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"animal crying!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承的特点：  </p><ul><li>子类拥有父类除private以外的所有属性和方法 </li><li>子类可以拥有自己的属性和方法 </li><li>子类可以重写实现父类的方法 </li><li>Java 中的继承是单继承，一个类只有一个父类</li></ul></li></ul></li><li><p>方法重写</p><p>&emsp;&emsp;方法重写时需要注意，重写的方法一定要与原父类的方法语法保持一致，比如返回值类型，参数类型及个数，和方法名都必须一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;        </span><br><span class="line">  <span class="comment">//重写父类的bark方法         </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;         </span><br><span class="line">    System.out.println(<span class="string">"汪！汪！汪！"</span>);     </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    Animal b = <span class="keyword">new</span> Dog();</span><br><span class="line">    a.bark(); <span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line">    d.bark(); <span class="comment">// 执行 Dog 类的方法</span></span><br><span class="line">    b.bark(); <span class="comment">// 执行 Dog 类的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承的初始化顺序</p><p>&emsp;&emsp;继承的初始化顺序是先初始化父类再初始化子类。</p><ul><li>final 关键字：可以修饰类、方法、属性和变量<ul><li>final 修饰类，则该类不允许被继承，为最终类  </li><li>final 修饰方法，则该方法不允许被覆盖（重写）  </li><li>final 修饰属性：则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）</li></ul></li><li>super 关键字：在子类内部使用，代表父类对象<ul><li>访问父类的属性 super.属性名  </li><li>访问父类的方法 super.bark()  </li><li>子类构造方法需要调用父类的构造方法时，在子类的构造方法体里最前面的位置：super()</li></ul></li></ul></li></ul><h3 id="Java-多态"><a href="#Java-多态" class="headerlink" title="Java 多态"></a>Java 多态</h3><p>&emsp;&emsp;多态是指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。多态也称作动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</p><p>&emsp;&emsp;通俗地讲，只通过父类就能够引用不同的子类，这就是多态，我们只有在运行的时候才会知道引用变量所指向的具体实例对象。</p><ul><li><p>向上转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 除了能够引用父类中定义的所有属性和方法外，还可以使用子类强大的功能。但是对于只存在于子类的方法和</span></span><br><span class="line"><span class="comment">// 属性就不能获取。</span></span><br><span class="line"><span class="comment">// 向上转型，在运行时，会遗忘子类对象中与父类对象中不同的方法，也会覆盖与父类中相同的方法——重写。（方</span></span><br><span class="line"><span class="comment">// 法名，参数都相同）</span></span><br><span class="line">Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// b是父类的引用指向的是子类的对象</span></span><br></pre></td></tr></table></figure></li><li><p>多态的实现条件</p><p><strong>Java 实现多态有三个必要条件：继承、重写和向上转型（即父类引用指向子类对象）。</strong></p><p>只有满足上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p></li><li><p>多态的实现</p><ul><li><p>重写</p></li><li><p>抽象类和抽象方法</p><p>抽象方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;  <span class="comment">// f()方法是抽象方法，包含抽象方法的类是抽象类</span></span><br></pre></td></tr></table></figure><ul><li>在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。也就是说抽象类是约束子类必须要实现哪些方法，而并不关注方法如何去实现</li><li>从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性</li><li>抽象类是限制规定子类必须实现某些方法，但不关注实现细节</li></ul></li><li><p>实现细节</p><ul><li><p>用 abstract 修饰符定义抽象类</p></li><li><p>用 abstract 修饰符定义抽象方法，只用声明，不需要实现</p></li><li><p>包含抽象方法的类就是抽象类</p></li><li><p>抽象类中可以包含普通的方法，也可以没有抽象方法</p></li><li><p>抽象类的对象不能直接创建，我们通常是定义引用变量指向子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TelePhone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;  <span class="comment">// 抽象方法,打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>; <span class="comment">// 抽象方法，发短信</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建子类，并实现抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CellPhone</span> <span class="keyword">extends</span> <span class="title">TelePhone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"我可以打电话！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"我可以发短信！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CellPhone cp = <span class="keyword">new</span> CellPhone();</span><br><span class="line">        cp.call(); <span class="comment">// 我可以打电话！</span></span><br><span class="line">        cp.message(); <span class="comment">// 我可以发短信！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>接口：完全抽象类，没有提供任何方法体</p><ul><li><p>接口的声明语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名称 [extends 其他的类名] &#123;</span><br><span class="line">     <span class="comment">// 声明变量</span></span><br><span class="line">     <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// E.G</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int x;</span></span><br><span class="line">        <span class="comment">// 编译错误,x需要初始化，因为是 static final 类型</span></span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口不能用于实例化对象</li><li>接口中所有的方法是抽象方法</li><li>接口成员是 static final 类型</li><li>接口支持多继承</li></ul></li><li><p>多继承实现方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> <span class="title">A</span> <span class="keyword">extends</span> 接口1，接口2</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> 接口1，接口2</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// E.G</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Cat eats"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Cat travels"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.eat(); <span class="comment">// Cat eats</span></span><br><span class="line">        cat.travel(); <span class="comment">// Cat travels</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文章参考</p><ul><li><a href="http://www.runoob.com/java/java-polymorphism.html" target="_blank" rel="noopener">Java 多态</a></li><li><a href="http://www.runoob.com/java/java-interfaces.html" target="_blank" rel="noopener">Java 接口</a></li><li><a href="http://www.cnblogs.com/jack204/archive/2012/10/29/2745150.html" target="_blank" rel="noopener">Java 多态理解</a></li><li><a href="http://www.cnblogs.com/chenssy/p/3372798.html" target="_blank" rel="noopener">java提高篇(四)—–理解java的三大特性之多态</a></li></ul></li></ul><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java-类与对象&quot;&gt;&lt;a href=&quot;#Java-类与对象&quot; class=&quot;headerlink&quot; title=&quot;Java 类与对象&quot;&gt;&lt;/a&gt;Java 类与对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;面向对象：体现的是人所关注对象的信息聚集在了一个具体的物体上，通过
      
    
    </summary>
    
      <category term="Java" scheme="https://sophoraflower.github.io/EverQuest/categories/Java/"/>
    
      <category term="编程基础" scheme="https://sophoraflower.github.io/EverQuest/categories/Java/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://sophoraflower.github.io/EverQuest/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>西湖春雪</title>
    <link href="https://sophoraflower.github.io/EverQuest/2018/0129/%E8%A5%BF%E6%B9%96%E6%98%A5%E9%9B%AA/"/>
    <id>https://sophoraflower.github.io/EverQuest/2018/0129/西湖春雪/</id>
    <published>2018-01-28T18:07:00.000Z</published>
    <updated>2018-01-28T18:23:47.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="西湖春游-2018-01-27-下午"><a href="#西湖春游-2018-01-27-下午" class="headerlink" title="西湖春游-2018/01/27 下午"></a>西湖春游-2018/01/27 下午</h3><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/0l0Kf11C3g.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/1f38ACLH5E.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/21A3lIicLl.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/2k1cK5GJha.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/4ALl1Jd9ge.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/4Jifa2K7cf.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/7DICk8iB4e.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/8d7eKKGiJe.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/B115DhdeIi.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/B88iI8Iklj.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/BE5g7h7jFg.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/EI160H2kgJ.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/I82HdDh8k6.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/a27aj7K9Ea.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/cbFfDEgHe0.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/cll4C87DDB.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/d881e6bKDC.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/fFibd1Ff0D.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/fb4iBeFEj5.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/gcA4hI1eF6.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/iE92820Dha.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/j2ll2k0ImK.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/jJ89A1l6i6.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/jlib4CG6hB.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/klHeHaiDH5.JPG" alt=""></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180129/lJmLbD1BiH.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;西湖春游-2018-01-27-下午&quot;&gt;&lt;a href=&quot;#西湖春游-2018-01-27-下午&quot; class=&quot;headerlink&quot; title=&quot;西湖春游-2018/01/27 下午&quot;&gt;&lt;/a&gt;西湖春游-2018/01/27 下午&lt;/h3&gt;&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="LifeStyle" scheme="https://sophoraflower.github.io/EverQuest/categories/LifeStyle/"/>
    
      <category term="摄影" scheme="https://sophoraflower.github.io/EverQuest/categories/LifeStyle/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="摄影" scheme="https://sophoraflower.github.io/EverQuest/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>EverQuest-前半年规划</title>
    <link href="https://sophoraflower.github.io/EverQuest/2018/0101/EverQuest-2018-%E5%89%8D%E5%8D%8A%E5%B9%B4%E8%A7%84%E5%88%92/"/>
    <id>https://sophoraflower.github.io/EverQuest/2018/0101/EverQuest-2018-前半年规划/</id>
    <published>2018-01-01T10:18:18.000Z</published>
    <updated>2018-02-02T17:20:34.972Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=30039520&auto=1&height=66"></iframe><h4 id="Python-语言学习"><a href="#Python-语言学习" class="headerlink" title="Python 语言学习"></a>Python 语言学习</h4><ul><li>《Python核心编程》</li><li>Web接口开发 +  Django</li><li>接口测试（性能）框架整合 + 构建 + 升级</li><li>UI 自动测试化框架整合 + 构建 + 升级</li><li>……</li></ul><h4 id="Java-语言学习"><a href="#Java-语言学习" class="headerlink" title="Java 语言学习"></a>Java 语言学习</h4><ul><li>【Java Web 课程】 - 网易云课堂 - <strong>（201802-05）</strong> - 核心</li><li>《Java 8 编程入门官方教程》</li><li>《Java 程序设计》-  北京大学 - 中国大学MOOC </li><li>《面向对象程序设计——Java语言》 - 浙江大学 - 中国大学MOOC</li><li>Java相关课程 - 慕课网/实验楼 - 围绕云课堂核心选择性学习</li><li>……</li></ul><h4 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h4><ul><li>《图解 HTTP》</li><li>《SQL 基础教程》</li><li>《计算机网络》</li><li>《数据结构（Java）》</li><li>IT 相关书籍</li><li>……</li></ul><h4 id="测试进阶"><a href="#测试进阶" class="headerlink" title="测试进阶"></a>测试进阶</h4><ul><li>《Web 接口开发与自动化测试》</li><li>《Selenium 2 自动化测试实战 基于Python语言》</li><li>《深入理解Android》自动化测试</li><li>《全栈性能测试修炼宝典 JMeter实战》</li><li>《Fiddler 调试权威指南》</li><li>……</li></ul><h4 id="摄影-书法-旅游"><a href="#摄影-书法-旅游" class="headerlink" title="摄影-书法-旅游"></a>摄影-书法-旅游</h4><ul><li>《摄影基础》- 电子科技大学 - 中国大学MOOC</li><li>《pssx60hs-cu-zh》（佳能SX60HS官方指导）</li><li>千岛湖-黄山-XX古镇-XX古村</li><li>……</li></ul><h4 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h4><ul><li>托业</li><li>……</li></ul><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul><li>Linux系统（Linux命令行）</li><li>shell脚本编程大全</li></ul><h4 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h4><ul><li>八块腹肌</li><li>体重（62-65KG）</li><li>骑行</li><li>……</li></ul><h4 id="读书计划"><a href="#读书计划" class="headerlink" title="读书计划"></a>读书计划</h4><ul><li>《中国通史》</li><li>《老子新释》</li><li>《浪潮之巅》</li><li>……</li></ul><h4 id="……"><a href="#……" class="headerlink" title="……"></a>……</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="EverQuest" scheme="https://sophoraflower.github.io/EverQuest/categories/EverQuest/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础练习汇总</title>
    <link href="https://sophoraflower.github.io/EverQuest/2017/1227/Java%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E6%B1%87%E6%80%BB/"/>
    <id>https://sophoraflower.github.io/EverQuest/2017/1227/Java基础练习汇总/</id>
    <published>2017-12-27T14:41:00.000Z</published>
    <updated>2018-01-21T23:24:24.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="用程序来做计算"><a href="#用程序来做计算" class="headerlink" title="用程序来做计算"></a>用程序来做计算</h4><ul><li><p><strong>温度转换</strong></p><p>​        写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">°F = (<span class="number">9</span>/<span class="number">5</span>)*°C + <span class="number">32</span></span><br></pre></td></tr></table></figure><p>​        程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p><p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span>)x;</span><br></pre></td></tr></table></figure><p><strong>输入格式:</strong></p><p>​        一个整数。</p><p><strong>输出格式：</strong></p><p>​        一个整数</p><p><strong>输入样例：</strong></p><p>​        100</p><p><strong>输出样例：</strong></p><p>​        37</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> degreeFa;</span><br><span class="line">        <span class="keyword">int</span> centigrade;</span><br><span class="line">        degreeFa = in.nextInt();</span><br><span class="line">        centigrade = (<span class="keyword">int</span>) (<span class="number">5.0</span>*(degreeFa-<span class="number">32</span>)/<span class="number">9.0</span>);</span><br><span class="line">        System.out.println(centigrade);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>猜字游戏</p></li></ul><p>&emsp;&emsp;为什么方法正确的话，100以内的数最多猜7次就够了？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num=<span class="number">1</span>; num&lt;=<span class="number">100</span>; num++) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> guess;     </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        guess=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(guess&lt;num) &#123;</span><br><span class="line">        low=guess+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        high=guess+<span class="number">1</span>;</span><br><span class="line">        &#125;         </span><br><span class="line">                ++count;  </span><br><span class="line">                System.out.println(<span class="string">"第"</span>+count+<span class="string">"次猜:"</span>+guess);</span><br><span class="line">        &#125;<span class="keyword">while</span>(guess!=num); </span><br><span class="line">            System.out.println(<span class="string">"一共猜了"</span>+count+<span class="string">"次"</span>); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>温度转换</p><p>写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">°F = (<span class="number">9</span>/<span class="number">5</span>)*°C + <span class="number">32</span></span><br></pre></td></tr></table></figure></li></ol><p>程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p><p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span>)x;</span><br></pre></td></tr></table></figure></li></ol><p><strong>输入格式:</strong></p><p>一个整数。</p><p><strong>输出格式：</strong></p><p>一个整数</p><p><strong>输入样例：</strong></p><p>100</p><p><strong>输出样例：</strong></p><p>37</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">int</span> degreeFa;</span><br><span class="line">      <span class="keyword">int</span> centigrade;</span><br><span class="line">      degreeFa = in.nextInt();</span><br><span class="line">      centigrade = (<span class="keyword">int</span>) (<span class="number">5.0</span>*(degreeFa-<span class="number">32</span>)/<span class="number">9.0</span>);</span><br><span class="line">      System.out.println(centigrade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>时间换算</p><p><strong>题目内容：</strong></p><p>UTC是世界协调时，BJT是北京时间，UTC时间相当于BJT减去8。现在，你的程序要读入一个整数，表示BJT的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10分，需要保留十位上的0。如1124表示11点24分，而905表示9点5分，36表示0点36分，7表示0点7分。</p><p>有效的输入范围是0到2359，即你的程序不可能从测试服务器读到0到2359以外的输入数据。</p><p>你的程序要输出这个时间对应的UTC时间，输出的格式和输入的相同，即输出一个整数，表示UTC的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10分，需要保留十位上的0。</p><p>提醒：要小心跨日的换算。</p><p><strong>输入格式:</strong></p><p>一个整数，表示BJT的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10分，需要保留十位上的0。</p><p><strong>输出格式：</strong></p><p>一个整数，表示UTC的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10分，需要保留十位上的0。</p><p><strong>输入样例：</strong></p><p>903</p><p><strong>输出样例：</strong></p><p>103</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> BTJTime = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span> UTCTime;</span><br><span class="line">        <span class="keyword">if</span> (BTJTime&gt;=<span class="number">800</span>) &#123;</span><br><span class="line">            UTCTime = BTJTime-<span class="number">800</span>;</span><br><span class="line">            System.out.println(UTCTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            UTCTime = BTJTime+<span class="number">1600</span>;</span><br><span class="line">            System.out.println(UTCTime);</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>奇偶个数</p><p><strong>题目内容：</strong></p><p>你的程序要读入一系列正整数数据，输入-1表示输入结束，-1本身不是输入的数据。程序输出读到的数据中的奇数和偶数的个数。</p><p><strong>输入格式:</strong></p><p>一系列正整数，整数的范围是（0,100000）。如果输入-1则表示输入结束。</p><p><strong>输出格式：</strong></p><p>两个整数，第一个整数表示读入数据中的奇数的个数，第二个整数表示读入数据中的偶数的个数。两个整数之间以空格分隔。</p><p><strong>输入样例：</strong></p><p>9 3 4 2 5 7 -1</p><p><strong>输出样例：</strong></p><p>4 2</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> intNumber = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span> evenNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> oddNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (intNumber!=-<span class="number">1</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (intNumber%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        evenNumber++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        oddNumber++;</span><br><span class="line">        &#125;</span><br><span class="line">        intNumber = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(oddNumber+<span class="string">" "</span>+evenNumber);      </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数字特征值</p><p><strong>题目内容：</strong></p><p>对数字求特征值是常用的编码算法，奇偶特征是一种简单的特征值。对于一个整数，从个位开始对每一位数字编号，个位是1号，十位是2号，以此类推。这个整数在第n位上的数字记作x，如果x和n的奇偶性相同，则记下一个1，否则记下一个0。按照整数的顺序把对应位的表示奇偶性的0和1都记录下来，就形成了一个二进制数字。比如，对于342315，这个二进制数字就是001101。</p><p>这里的计算可以用下面的表格来表示：</p><p>| 数字    | 3    | 4    | 2    | 3    | 1    | 5    |<br>| —– | —- | —- | —- | —- | —- | —- |<br>| 数位    | 6    | 5    | 4    | 3    | 2    | 1    |<br>| 数字奇偶  | 奇    | 偶    | 偶    | 奇    | 奇    | 奇    |<br>| 数位奇偶  | 偶    | 奇    | 偶    | 奇    | 偶    | 奇    |<br>| 奇偶一致  | 0    | 0    | 1    | 1    | 0    | 1    |<br>| 二进制位值 | 32   | 16   | 8    | 4    | 2    | 1    |</p><p>按照二进制位值将1的位的位值加起来就得到了结果13。</p><p>你的程序要读入一个非负整数，整数的范围是[0,100000]，然后按照上述算法计算出表示奇偶性的那个二进制数字，输出它对应的十进制值。</p><p><em>提示：将整数从右向左分解，数位每次加1，而二进制值每次乘2。</em></p><p><strong>输入格式:</strong></p><p>一个非负整数，整数的范围是[0,100000]。</p><p><strong>输出格式：</strong></p><p>一个整数，表示计算结果。</p><p><strong>输入样例：</strong></p><p>342315</p><p><strong>输出样例：</strong></p><p>13</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> intNumber = in.nextInt(); </span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">int</span> iNumber = intNumber;</span><br><span class="line">        <span class="keyword">int</span> outNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 判断输入数位数</span></span><br><span class="line">        <span class="keyword">int</span> figureNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        intNumber =intNumber/<span class="number">10</span>;</span><br><span class="line">        figureNumber =figureNumber+<span class="number">1</span>;       </span><br><span class="line">        &#125; <span class="keyword">while</span> ( intNumber&gt;<span class="number">0</span> ); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 数字和数位奇偶对比</span></span><br><span class="line">        <span class="keyword">while</span> (figureNumber&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取数字</span></span><br><span class="line">        <span class="keyword">int</span> number1 =iNumber%((<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, figureNumber));</span><br><span class="line">        <span class="keyword">int</span> number =number1/((<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, figureNumber-<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">int</span> oNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (number%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; figureNumber%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        oNumber = (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, (figureNumber-<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number%<span class="number">2</span>!=<span class="number">0</span> &amp;&amp; figureNumber%<span class="number">2</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">        oNumber = (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, (figureNumber-<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oNumber = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        outNumber +=oNumber;</span><br><span class="line">        figureNumber--;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(outNumber);      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>信号报告</p><p><strong>题目内容：</strong></p><p>无线电台的RS制信号报告是由三两个部分组成的：</p><p>R(Readability) 信号可辨度即清晰度.</p><p>S(Strength)    信号强度即大小.</p><p>其中R位于报告第一位，共分5级，用1—5数字表示.</p><ul><li>1—Unreadable</li><li>2—Barely readable, occasional words distinguishable</li><li>3—Readable with considerable difficulty</li><li>4—Readable with practically no difficulty</li><li>5—Perfectly readable</li></ul><p>报告第二位是S，共分九个级别，用1—9中的一位数字表示</p><ul><li>1—Faint signals, barely perceptible</li><li>2—Very weak signals</li><li>3—Weak signals</li><li>4—Fair signals</li><li>5—Fairly good signals</li><li>6—Good signals</li><li>7—Moderately strong signals</li><li>8—Strong signals</li><li>9—Extremely strong signals</li></ul><p>现在，你的程序要读入一个信号报告的数字，然后输出对应的含义。如读到59，则输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Extremely strong signals, perfectly readable.</span><br></pre></td></tr></table></figure><p><strong>输入格式:</strong></p><p>一个整数，信号报告。整数的十位部分表示可辨度，个位部分表示强度。输入的整数范围是[11,59]，这个范围外的数字不可能出现在测试数据中。</p><p><strong>输出格式：</strong></p><p>一句话，表示这个信号报告的意义。按照题目中的文字，先输出表示强度的文字，跟上逗号和空格，然后是表示可辨度的文字，跟上句号。注意可辨度的句子的第一个字母是小写的。注意这里的标点符号都是英文的。</p><p><strong>输入样例：</strong></p><p>33</p><p><strong>输出样例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Weak signals, readable with considerable difficulty.</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> intNumber = in.nextInt(); </span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">int</span> firstNumber = intNumber/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> secondNumber = intNumber%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">switch</span> (secondNumber) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.print(<span class="string">"Faint signals, barely perceptible"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.print(<span class="string">"Very weak signals"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.print(<span class="string">"Weak signals"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.print(<span class="string">"Fair signals"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.print(<span class="string">"Fairly good signals"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.print(<span class="string">"Good signals"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">System.out.print(<span class="string">"Moderately strong signals"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">System.out.print(<span class="string">"Strong signals"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">System.out.print(<span class="string">"Extremely strong signals"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.print(<span class="string">"input error!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">        System.out.print(<span class="string">", "</span>);</span><br><span class="line">        <span class="keyword">switch</span> (firstNumber) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.print(<span class="string">"unreadable"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.print(<span class="string">"barely readable, occasional words distinguishable"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.print(<span class="string">"readable with considerable difficulty"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.print(<span class="string">"readable with practically no difficulty"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.print(<span class="string">"perfectly readable"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.print(<span class="string">"input error!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">        System.out.print(<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>素数和</p><p><strong>题目内容：</strong></p><p>我们认为2是第一个素数，3是第二个素数，5是第三个素数，依次类推。</p><p>现在，给定两个整数n和m，0&lt;n&lt;=m&lt;=200，你的程序要计算第n个素数到第m个素数之间所有的素数的和，包括第n个素数和第m个素数。</p><p>注意，是第n个素数到第m个素数之间的所有的素数，并不是n和m之间的所有的素数。</p><p><strong>输入格式:</strong></p><p>两个整数，第一个表示n，第二个表示m。</p><p><strong>输出格式：</strong></p><p>一个整数，表示第n个素数到第m个素数之间所有的素数的和，包括第n个素数和第m个素数。</p><p><strong>输入样例：</strong></p><p>2 4</p><p><strong>输出样例：</strong></p><p>15</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt(); </span><br><span class="line">        <span class="keyword">int</span> m = in.nextInt();</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>, number=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">2</span>, cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&lt;=<span class="number">0</span>||m&lt;n||m&gt;<span class="number">200</span>) &#123;</span><br><span class="line">        System.out.print(<span class="string">"输入不符合，请重新输入："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( cnt &lt; m ) &#123;</span><br><span class="line">        <span class="keyword">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">2</span>; i&lt;x; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( x%i == <span class="number">0</span> ) &#123;</span><br><span class="line">        isPrime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( isPrime == <span class="number">1</span> )&#123;</span><br><span class="line">        number = x;</span><br><span class="line">       cnt++; </span><br><span class="line">       <span class="keyword">if</span>( cnt &gt;= n)&#123;</span><br><span class="line">        sum = sum + number;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>念整数</p><p><strong>题目内容：</strong></p><p>你的程序要读入一个整数，范围是[-100000,100000]。然后，用汉语拼音将这个整数的每一位输出出来。</p><p>如输入1234，则输出：</p><p>yi er san si</p><p>注意，每个字的拼音之间有一个空格，但是最后的字后面没有空格。当遇到负数时，在输出的开头加上“fu”，如-2341输出为：</p><p>fu er san si yi</p><p><strong>输入格式:</strong></p><p>一个整数，范围是[-100000,100000]。</p><p><strong>输出格式：</strong></p><p>表示这个整数的每一位数字的汉语拼音，每一位数字的拼音之间以空格分隔，末尾没有空格。</p><p><strong>输入样例：</strong></p><p>-30</p><p><strong>输出样例：</strong></p><p>fu san ling</p><p><strong>解决方案一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> number = in.nextInt(); </span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">int</span> digit = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">if</span> ( number &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        System.out.print(<span class="string">"fu "</span>);</span><br><span class="line">        number = -number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (digit &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( number / digit != <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        digit /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( ; digit &gt; <span class="number">0</span>; digit /= <span class="number">10</span> ) &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( number/digit ) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.print(<span class="string">"yi"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.print(<span class="string">"er"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.print(<span class="string">"san"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.print(<span class="string">"si"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.print(<span class="string">"wu"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            System.out.print(<span class="string">"liu"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            System.out.print(<span class="string">"qi"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            System.out.print(<span class="string">"ba"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            System.out.print(<span class="string">"jiu"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            System.out.print(<span class="string">"ling"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        number -= (number / digit) * digit;</span><br><span class="line">            <span class="keyword">if</span> (digit != <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">int</span> a = s.nextInt();</span><br><span class="line">            HashMap&lt;String,String&gt; pinyin = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">            pinyin.put(<span class="string">"0"</span>,<span class="string">"ling"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"1"</span>,<span class="string">"yi"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"2"</span>,<span class="string">"er"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"3"</span>,<span class="string">"san"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"4"</span>,<span class="string">"si"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"5"</span>,<span class="string">"wu"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"6"</span>,<span class="string">"liu"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"7"</span>,<span class="string">"qi"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"8"</span>,<span class="string">"ba"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"9"</span>,<span class="string">"jiu"</span>);</span><br><span class="line">            pinyin.put(<span class="string">"-"</span>,<span class="string">"fu"</span>);</span><br><span class="line">         </span><br><span class="line">            String line = a+<span class="string">""</span>;</span><br><span class="line">            String[] arr = line.split(<span class="string">""</span>);</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i==arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    sb.append(pinyin.get(arr[i]));</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        sb.append(pinyin.get(arr[i])+<span class="string">" "</span>);     </span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;         </span><br><span class="line">            System.out.print(sb.toString());     </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案三：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String []str1 = &#123;</span><br><span class="line">            <span class="string">"ling"</span>,<span class="string">"yi"</span>,<span class="string">"er"</span>,<span class="string">"san"</span>,<span class="string">"si"</span>,<span class="string">"wu"</span>,<span class="string">"liu"</span>,<span class="string">"qi"</span>,<span class="string">"ba"</span>,<span class="string">"jiu"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        String str = in.next();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)System.out.print(<span class="string">" "</span>);</span><br><span class="line">            String sub = str.substring(i,i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(sub.equals(<span class="string">"-"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print(<span class="string">"fu"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(sub.equals(j+<span class="string">""</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        System.out.print(str1[j]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>多项式加法（5分）</p><p><strong>题目内容：</strong></p><p>一个多项式可以表达为x的各次幂与系数乘积的和，比如：</p><p>2x6+3x5+12x3+6x+20</p><p>现在，你的程序要读入两个多项式，然后输出这两个多项式的和，也就是把对应的幂上的系数相加然后输出。</p><p>程序要处理的幂最大为100。</p><p><strong>输入格式:</strong></p><p>总共要输入两个多项式，每个多项式的输入格式如下：</p><p>每行输入两个数字，第一个表示幂次，第二个表示该幂次的系数，所有的系数都是整数。第一行一定是最高幂，最后一行一定是0次幂。</p><p>注意第一行和最后一行之间不一定按照幂次降低顺序排列；如果某个幂次的系数为0，就不出现在输入数据中了；0次幂的系数为0时还是会出现在输入数据中。</p><p><strong>输出格式：</strong></p><p>从最高幂开始依次降到0幂，如：</p><p>2x6+3x5+12x3-6x+20</p><p>注意其中的x是小写字母x，而且所有的符号之间都没有空格，如果某个幂的系数为0则不需要有那项。</p><p><strong>输入样例：</strong></p><p>6 2</p><p>5 3</p><p>3 12</p><p>1 6</p><p>0 20</p><p>6 2</p><p>5 3</p><p>2 12</p><p>1 6</p><p>0 20</p><p><strong>输出样例：</strong></p><p>4x6+6x5+12x3+12x2+12x+40</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;        </span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> L = <span class="number">101</span>;</span><br><span class="line">        <span class="keyword">int</span>[] poly = <span class="keyword">new</span> <span class="keyword">int</span>[L];  </span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">0</span>, n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count&lt;<span class="number">2</span>) &#123;</span><br><span class="line">        m = in.nextInt();</span><br><span class="line">            n = in.nextInt();</span><br><span class="line">            <span class="keyword">if</span> ( poly[m] != <span class="number">0</span> ) &#123;</span><br><span class="line">                    poly[m] += n;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    poly[m] = n;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> ( m==<span class="number">0</span> ) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断最大幂</span></span><br><span class="line">        <span class="keyword">int</span> maxM = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = L; i &gt; <span class="number">0</span>; i-- ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (poly[i-<span class="number">1</span>] != <span class="number">0</span> ) &#123;</span><br><span class="line">                    maxM = i-<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//分只有0次幂和有非0次幂两种情况 </span></span><br><span class="line">            <span class="keyword">if</span> (maxM == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果只有0次幂，直接输出</span></span><br><span class="line">                System.out.print(poly[<span class="number">0</span>]);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> ( <span class="keyword">int</span> i = maxM; i &gt; -<span class="number">1</span>; i--) &#123;</span><br><span class="line">                    <span class="comment">//非0次幂分幂大于1，幂等于1,每种情况中又分系数绝对值为1和不为1两种情况。 </span></span><br><span class="line">                    <span class="keyword">if</span> ( i &gt; <span class="number">1</span>) &#123;           </span><br><span class="line">                        <span class="keyword">if</span> ( Math.abs(poly[i]) == <span class="number">1</span> ) &#123;</span><br><span class="line">                        System.out.print(<span class="string">"x"</span>+i);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( Math.abs(poly[i])&gt; <span class="number">1</span> ) &#123;</span><br><span class="line">                        System.out.print(Math.abs(poly[i])+<span class="string">"x"</span>+i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span> ) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( Math.abs(poly[i]) == <span class="number">1</span> ) &#123;</span><br><span class="line">                        System.out.print(<span class="string">"x"</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( Math.abs(poly[i]) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.print(Math.abs(poly[i])+<span class="string">"x"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( poly[i] != <span class="number">0</span> ) &#123;</span><br><span class="line">                        System.out.print(Math.abs(poly[i]));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                     </span><br><span class="line">                    <span class="keyword">if</span> ( i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> ( poly[i-<span class="number">1</span>] &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                        System.out.print(<span class="string">"+"</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(poly[i-<span class="number">1</span>] &lt; <span class="number">0</span>) &#123; </span><br><span class="line">                        System.out.print(<span class="string">"-"</span>);   </span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.print(<span class="string">""</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>单词长度</p><p><strong>题目内容：</strong></p><p>你的程序要读入一行文本，其中以空格分隔为若干个单词，以‘.’结束。你要输出这行文本中每个单词的长度。这里的单词与语言无关，可以包括各种符号，比如“it’s”算一个单词，长度为4。注意，行中可能出现连续的空格。</p><p><strong>输入格式:</strong></p><p>输入在一行中给出一行文本，以‘.’结束，结尾的句号不能计算在最后一个单词的长度内。</p><p><strong>输出格式：</strong></p><p>在一行中输出这行文本对应的单词的长度，每个长度之间以空格隔开，行末没有最后的空格。</p><p><strong>输入样例：</strong></p><p>It’s great to see you here.</p><p><strong>输出样例：</strong></p><p>4 5 2 3 3 4</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String intString = in.nextLine(); </span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>, m = intString.length();</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        n = intString.indexOf(<span class="string">" "</span>);      </span><br><span class="line">        <span class="keyword">if</span> (n == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intString.equals(<span class="string">"."</span>)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.print(intString.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">              </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intString.equals(<span class="string">"."</span>)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String strX = intString.substring(<span class="number">0</span>, n);</span><br><span class="line">                System.out.print(strX.length());</span><br><span class="line">        System.out.print(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i=n+<span class="number">1</span>; i&lt;m; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intString.substring(i, i+<span class="number">1</span>).equals(<span class="string">" "</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            intString = intString.substring(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        &#125; <span class="keyword">while</span>(n&gt;<span class="number">0</span>);           </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>GPS数据处理</p><p><strong>题目内容：</strong></p><p>NMEA-0183协议是为了在不同的GPS（全球定位系统）导航设备中建立统一的BTCM（海事无线电技术委员会）标准，由美国国家海洋电子协会（NMEA-The National Marine Electronics Associa-tion）制定的一套通讯协议。GPS接收机根据NMEA-0183协议的标准规范，将位置、速度等信息通过串口传送到PC机、PDA等设备。</p><p>NMEA-0183协议是GPS接收机应当遵守的标准协议，也是目前GPS接收机上使用最广泛的协议，大多数常见的GPS接收机、GPS数据处理软件、导航软件都遵守或者至少兼容这个协议。</p><p>NMEA-0183协议定义的语句非常多，但是常用的或者说兼容性最广的语句只有$GPGGA、$GPGSA、$GPGSV、$GPRMC、$GPVTG、$GPGLL等。</p><p>其中$GPRMC语句的格式如下：</p><p>$GPRMC,024813.640,A,3158.4608,N,11848.3737,E,10.05,324.27,150706,,,A*50</p><p>这里整条语句是一个文本行，行中以逗号“,”隔开各个字段，每个字段的大小（长度）不一，这里的示例只是一种可能，并不能认为字段的大小就如上述例句一样。</p><p>字段0：$GPRMC，语句ID，表明该语句为Recommended Minimum Specific GPS/TRANSIT Data（RMC）推荐最小定位信息</p><p>字段1：UTC时间，hhmmss.sss格式</p><p>字段2：状态，A=定位，V=未定位</p><p>字段3：纬度ddmm.mmmm，度分格式（前导位数不足则补0）</p><p>字段4：纬度N（北纬）或S（南纬）</p><p>字段5：经度dddmm.mmmm，度分格式（前导位数不足则补0）</p><p>字段6：经度E（东经）或W（西经）</p><p>字段7：速度，节，Knots</p><p>字段8：方位角，度</p><p>字段9：UTC日期，DDMMYY格式</p><p>字段10：磁偏角，（000 - 180）度（前导位数不足则补0）</p><p>字段11：磁偏角方向，E=东W=西</p><p>字段16：校验值</p><p>这里，“<em>”为校验和识别符，其后面的两位数为校验和，代表了“$”和“</em>”之间所有字符（不包括这两个字符）的异或值的十六进制值。上面这条例句的校验和是十六进制的50，也就是十进制的80。</p><p>提示：^运算符的作用是异或。将$和<em>之间所有的字符做^运算(第一个字符和第二个字符异或，结果再和第三个字符异或，依此类推)之后的值对65536取余后的结果，应该和</em>后面的两个十六进制数字的值相等，否则的话说明这条语句在传输中发生了错误。注意这个十六进制值中是会出现A-F的大写字母的。另外，如果你需要的话，可以用Integer.parseInt(s)从String变量s中得到其所表达的整数数字；而Integer.parseInt(s, 16)从String变量s中得到其所表达的十六进制数字</p><p>现在，你的程序要读入一系列GPS输出，其中包含$GPRMC，也包含其他语句。在数据的最后，有一行单独的</p><p>END</p><p>表示数据的结束。</p><p>你的程序要从中找出$GPRMC语句，计算校验和，找出其中校验正确，并且字段2表示已定位的语句，从中计算出时间，换算成北京时间。一次数据中会包含多条$GPRMC语句，以最后一条语句得到的北京时间作为结果输出。</p><p>你的程序一定会读到一条有效的$GPRMC语句。</p><p><strong>输入格式:</strong></p><p>多条GPS语句，每条均以回车换行结束。最后一行是END三个大写字母。</p><p><strong>输出格式：</strong></p><p>6位数时间，表达为：</p><p>hh:mm:ss</p><p>其中，hh是两位数的小时，不足两位时前面补0；mm是两位数的分钟，不足两位时前面补0；ss是两位数的秒，不足两位时前面补0。</p><p><strong>输入样例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$GPRMC,<span class="number">024813.640</span>,A,<span class="number">3158.4608</span>,N,<span class="number">11848.3737</span>,E,<span class="number">10.05</span>,<span class="number">324.27</span>,<span class="number">150706</span>,,,A*<span class="number">50</span></span><br></pre></td></tr></table></figure><p>END</p><p><strong>输出样例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">48</span>:<span class="number">13</span></span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String GPSOut;</span><br><span class="line">GPSOut = in.nextLine();</span><br><span class="line">String lastGPMMC = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> verify = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!GPSOut.equals(<span class="string">"END"</span>)) &#123;</span><br><span class="line">lastGPMMC = GPSOut;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> GPSValue = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 校验值</span></span><br><span class="line"><span class="keyword">if</span> (GPSOut.substring(<span class="number">0</span>, <span class="number">6</span>).equals(<span class="string">"$GPRMC"</span>)) &#123;</span><br><span class="line"><span class="comment">// ^运算</span></span><br><span class="line">String GPString = GPSOut;</span><br><span class="line"><span class="keyword">char</span> gString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = GPString.indexOf(<span class="string">"*"</span>);</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++ ) &#123;</span><br><span class="line">gString = GPString.charAt(i);</span><br><span class="line">sum = sum^gString; </span><br><span class="line">&#125; </span><br><span class="line">GPSValue = Integer.parseInt(GPString.substring(n+<span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum == GPSValue) &#123;</span><br><span class="line">verify = <span class="keyword">true</span>;</span><br><span class="line">GPSOut = in.nextLine();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">verify = <span class="keyword">false</span>;</span><br><span class="line">System.out.print(<span class="string">"GPS输出 $GPRMC语句校验值错误！"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    in.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出时间(UTC&gt;BJ)</span></span><br><span class="line">    <span class="keyword">if</span> (verify) &#123;</span><br><span class="line">String UTC = lastGPMMC.substring(<span class="number">7</span>, <span class="number">13</span>);</span><br><span class="line"><span class="keyword">if</span>(UTC.charAt(<span class="number">0</span>)==<span class="string">'0'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> sigle = UTC.charAt(<span class="number">1</span>);</span><br><span class="line">String atime = String.valueOf(sigle);</span><br><span class="line">Integer btime = Integer.parseInt(atime);</span><br><span class="line"><span class="keyword">int</span> stime=btime;</span><br><span class="line"><span class="keyword">int</span> BJTstime = stime +<span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span>(BJTstime&lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(<span class="string">"0"</span>+ BJTstime+ <span class="string">":"</span>+lastGPMMC.substring(<span class="number">9</span>, <span class="number">11</span>)+<span class="string">":"</span>+lastGPMMC.substring(<span class="number">11</span>, <span class="number">13</span>)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.print(BJTstime+ <span class="string">":"</span>+lastGPMMC.substring(<span class="number">9</span>, <span class="number">11</span>)+<span class="string">":"</span>+lastGPMMC.substring(<span class="number">11</span>, <span class="number">13</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">String dou = UTC.substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">Integer Ddou = Integer.parseInt(dou);</span><br><span class="line"><span class="keyword">int</span> BJTdou=Ddou;</span><br><span class="line"><span class="keyword">if</span>(BJTdou&lt;<span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(BJTdou+ <span class="string">":"</span>+lastGPMMC.substring(<span class="number">9</span>, <span class="number">11</span>)+<span class="string">":"</span>+lastGPMMC.substring(<span class="number">11</span>, <span class="number">13</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">BJTdou = BJTdou + <span class="number">8</span> - <span class="number">24</span>; </span><br><span class="line">System.out.print(<span class="string">"0"</span>+ BJTdou+ <span class="string">":"</span>+lastGPMMC.substring(<span class="number">9</span>, <span class="number">11</span>)+<span class="string">":"</span>+lastGPMMC.substring(<span class="number">11</span>, <span class="number">13</span>)); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// UTC &gt; 北京时间</span></span><br><span class="line">lastGPMMC = lastGPMMC.substring(lastGPMMC.indexOf(<span class="string">','</span>)+<span class="number">1</span>);  </span><br><span class="line">lastGPMMC = lastGPMMC.substring(<span class="number">0</span>,lastGPMMC.indexOf(<span class="string">','</span>));</span><br><span class="line">lastGPMMC = lastGPMMC.substring(<span class="number">0</span>,lastGPMMC.indexOf(<span class="string">'.'</span>));</span><br><span class="line"><span class="keyword">int</span> time = Integer.parseInt(lastGPMMC);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hour;</span><br><span class="line"><span class="keyword">int</span> minute;</span><br><span class="line"><span class="keyword">int</span> second;</span><br><span class="line"><span class="keyword">if</span>(time&lt;<span class="number">99999</span>) &#123;</span><br><span class="line">  time = time%<span class="number">100</span>*<span class="number">10000</span>+time/<span class="number">100</span>%<span class="number">100</span>*<span class="number">100</span>+time/<span class="number">10000</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  time = time%<span class="number">100</span>*<span class="number">10000</span>+time/<span class="number">100</span>%<span class="number">100</span>*<span class="number">100</span>+time/<span class="number">10000</span>;</span><br><span class="line">&#125;                  </span><br><span class="line">hour =time%<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(hour&gt;=<span class="number">24</span>) &#123;</span><br><span class="line">  hour = hour - <span class="number">16</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  hour = hour + <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line">minute = time/<span class="number">100</span>%<span class="number">100</span>;</span><br><span class="line">second = time/<span class="number">10000</span>; </span><br><span class="line"><span class="keyword">if</span>(hour&gt;<span class="number">9</span>) &#123;</span><br><span class="line">  System.out.print(hour+<span class="string">":"</span>+minute+<span class="string">":"</span>+second);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.print(<span class="string">"0"</span>+hour+<span class="string">":"</span>+minute+<span class="string">":"</span>+second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分解质因数</p><p><strong>题目内容：</strong></p><p>每个非素数（合数）都可以写成几个素数（也可称为质数）相乘的形式，这几个素数就都叫做这个合数的质因数。比如，6可以被分解为2x3，而24可以被分解为2x2x2x3。</p><p>现在，你的程序要读入一个[2,100000]范围内的整数，然后输出它的质因数分解式；当读到的就是素数时，输出它本身。</p><p><strong>输入格式:</strong></p><p>一个整数，范围在[2,100000]内。</p><p><strong>输出格式：</strong></p><p>形如：</p><p>n=axbxcxd</p><p>或</p><p>n=n</p><p>所有的符号之间都没有空格，x是小写字母x。</p><p><strong>输入样例：</strong></p><p>18</p><p><strong>输出样例：</strong></p><p>18=2x3x3</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> isPrime = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> k=<span class="number">2</span>; k&lt;i; k++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( i % k == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">isPrime = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isPrime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> inputNum = in.nextInt();</span><br><span class="line">in.close();</span><br><span class="line"><span class="keyword">boolean</span> isP =  isPrime(inputNum);</span><br><span class="line"><span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!isP)</span><br><span class="line">&#123;   </span><br><span class="line">System.out.print(inputNum+<span class="string">"="</span>);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;inputNum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (inputNum%i==<span class="number">0</span>) &#123;</span><br><span class="line">number = inputNum/i;</span><br><span class="line">inputNum = number;</span><br><span class="line">System.out.print(i);</span><br><span class="line">System.out.print(<span class="string">"x"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span>(!isPrime(number));</span><br><span class="line">System.out.print(number);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (inputNum == <span class="number">2</span>) &#123;</span><br><span class="line">System.out.print(inputNum+<span class="string">"="</span>+inputNum);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(inputNum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><ul><li><p>完数</p><p><strong>题目内容：</strong></p><p>一个正整数的因子是所有可以整除它的正整数。而一个数如果恰好等于除它本身外的因子之和，这个数就称为完数。例如6=1＋2＋3(6的因子是1,2,3)。</p><p>现在，你要写一个程序，读入两个正整数n和m（1&lt;=n&lt;m&lt;1000），输出[n,m]范围内所有的完数。</p><p><em>提示：可以写一个函数来判断某个数是否是完数。</em></p><p><strong>输入格式:</strong></p><p>两个正整数，以空格分隔。</p><p><strong>输出格式：</strong></p><p>其间所有的完数，以空格分隔，最后一个数字后面没有空格。如果没有，则输出一个空行。</p><p><strong>输入样例：</strong></p><p>1 10</p><p><strong>输出样例：</strong></p><p>6</p><p><strong>解决方案：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] IntegerDivisor(<span class="keyword">int</span> m)&#123;</span><br><span class="line"><span class="keyword">int</span>[] IntegerDivisor = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line"><span class="keyword">int</span> cut = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++ )&#123;</span><br><span class="line"><span class="keyword">if</span> ( m % i == <span class="number">0</span> )&#123;</span><br><span class="line">IntegerDivisor[cut] = i;</span><br><span class="line">cut ++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> IntegerDivisor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPerfectNumber</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> isPerfectNumber = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++ )&#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">        <span class="keyword">if</span> (sum == x) &#123;</span><br><span class="line">        isPerfectNumber = <span class="keyword">true</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isPerfectNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> m = in.nextInt();</span><br><span class="line">in.close();</span><br><span class="line"><span class="keyword">int</span> number = n;</span><br><span class="line"><span class="keyword">int</span> cut = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] outputIntegerDivisor = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPerfectNumber(IntegerDivisor(number), number)) &#123;    </span><br><span class="line">        outputIntegerDivisor[cut] = number;</span><br><span class="line">        cut ++;</span><br><span class="line">    &#125;     </span><br><span class="line">    number ++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(number&lt;=m);</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j=<span class="number">0</span>; j&lt;outputIntegerDivisor.length; j++ )&#123;</span><br><span class="line">    <span class="keyword">if</span> (outputIntegerDivisor[j] != <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.print(outputIntegerDivisor[j]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span> (outputIntegerDivisor[j+<span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.print(<span class="string">" "</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;用程序来做计算&quot;&gt;&lt;a href=&quot;#用程序来做计算&quot; class=&quot;headerlink&quot; title=&quot;用程序来做计算&quot;&gt;&lt;/a&gt;用程序来做计算&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;温度转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​        写一个
      
    
    </summary>
    
      <category term="Java" scheme="https://sophoraflower.github.io/EverQuest/categories/Java/"/>
    
      <category term="编程基础" scheme="https://sophoraflower.github.io/EverQuest/categories/Java/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://sophoraflower.github.io/EverQuest/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识汇总</title>
    <link href="https://sophoraflower.github.io/EverQuest/2017/1220/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
    <id>https://sophoraflower.github.io/EverQuest/2017/1220/Java基础知识汇总/</id>
    <published>2017-12-19T23:41:00.000Z</published>
    <updated>2018-01-21T23:24:34.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="用程序来做计算"><a href="#用程序来做计算" class="headerlink" title="用程序来做计算"></a>用程序来做计算</h4><ul><li><p>安装编程软件：Eclipse</p></li><li><p>第一个Java程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"echo:"</span> + in.nextLine());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> price;</span><br><span class="line">        price = in.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"100-"</span> +price+<span class="string">"="</span>+ (<span class="number">100</span>-price));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义变量、变量名、标识符、关键字（保留字）、变量类型</p></li><li><p>浮点数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 档浮点数和整数方法哦一起运算时，Java会将整数转换成浮点数，然后进行浮点数运算</span><br><span class="line">System.out.println((x+y/2.0)*0.5);</span><br><span class="line">// 结果是0.30000000000000004 &gt; 浮点数</span><br><span class="line">System.out.println(3*0.1);</span><br></pre></td></tr></table></figure></li><li><p>赋值</p><p>初始化、运算符、表达式、常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 常量</span><br><span class="line">final int number =100;</span><br></pre></td></tr></table></figure></li><li><p>优先级</p><p>一般自左向右；单目+-和赋值=自右向左</p><p><img src="https://github.com/sophoraFlower/JavaWebPractice/blob/master/Pics/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png"></p></li><li><p>类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println((<span class="keyword">int</span>)(x+y/<span class="number">2.0</span>)*<span class="number">0.5</span>);</span><br><span class="line"><span class="comment">// 强制类型转换(浮点数取整去余数)</span></span><br><span class="line">x = （<span class="keyword">int</span>）(<span class="number">30</span>/<span class="number">3.0</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><ul><li>比较</li></ul><ul><li><p>关系运算（关系运算符）  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的关系运算符的优先级比算术运算低，但是比赋值运算的高</span></span><br><span class="line"><span class="comment">// 判断是否相等的==和！=的优先级比其他的低，而连续的关系运算是从左到右进行的</span></span><br><span class="line"><span class="comment">// 5 == 5.0  True</span></span><br><span class="line"><span class="comment">// 5 === 5.0 False</span></span><br><span class="line"><span class="comment">// 判断两个浮点数是否相等</span></span><br><span class="line">Math.abs(f1 - f2) &lt; <span class="number">0.0001</span></span><br></pre></td></tr></table></figure></li><li><p>做判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if语句</span></span><br><span class="line"><span class="keyword">if</span>( total &gt; amount )&#123;</span><br><span class="line">  total += amount+<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DeBug模式、断点、step over等</span></span><br></pre></td></tr></table></figure></li><li><p>判断语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 流程图</span><br><span class="line">if ( a&lt;b )&#123;</span><br><span class="line">  max=b;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  max=a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套和级联的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// else总是和最近的那个if匹配</span></span><br><span class="line"><span class="comment">// 在if或else后面总是用&#123;&#125;，即使只有一条语句的时候</span></span><br><span class="line"><span class="comment">// 分段函数 &gt; if-else if-...-else</span></span><br><span class="line"><span class="comment">// 单一出口，推荐</span></span><br><span class="line"><span class="keyword">int</span> f;                                   </span><br><span class="line"><span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) &#123;                           </span><br><span class="line">  f = -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">  f = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  f = <span class="number">2</span> * x;</span><br><span class="line">&#125;</span><br><span class="line">System.out.printIn(f)</span><br><span class="line"><span class="comment">// 非单一出口</span></span><br><span class="line"><span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) &#123;                           </span><br><span class="line">  System.out.println(-<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">  System.out.println(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="number">2</span> * x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断问题常见错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 忘记大括号</span></span><br><span class="line"><span class="comment">// if后加分号</span></span><br><span class="line"><span class="comment">// 错误使用==和=</span></span><br></pre></td></tr></table></figure></li><li><p>多路分支：switch-case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制表达式只能是整数型的结果</span></span><br><span class="line"><span class="comment">// 常量可以是常数，也可以是常数计算的表达式</span></span><br><span class="line"><span class="comment">// 根据表达式的结果，寻找匹配的case，并执行case后面的语句，一直到break为止</span></span><br><span class="line"><span class="keyword">switch</span> （ 控制表达式 ） &#123;</span><br><span class="line">  <span class="keyword">case</span> 常量：</span><br><span class="line">    语句</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">case</span> 常量：</span><br><span class="line">    语句</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    语句</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li><p>while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while的条件是在进入循环体之前判断的，执行完一轮循环之后，会再回到循环开始的地方再次判断条件，而不会在循环体中随时判断条件</span></span><br><span class="line"><span class="comment">// 条件成立循环继续的条件</span></span><br><span class="line"><span class="keyword">int</span> number = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( number &gt;<span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  number = number / <span class="number">10</span>;</span><br><span class="line">  count = count + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure></li><li><p>do…while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在进入循环体的时候不做检查，而是在执行完一轮循环体的代码之后，再来检查循环的条件是否满足，如果满足则进行下一轮循环，不满足则结束循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  &lt;循环体语句&gt;</span><br><span class="line">&#125;<span class="keyword">while</span>(&lt;循环条件&gt;)；</span><br></pre></td></tr></table></figure></li><li><p>计数循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环执行次数</span></span><br><span class="line"><span class="comment">// 循环结束（停止条件）</span></span><br></pre></td></tr></table></figure></li><li><p>算平拘数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量-&gt;算法-&gt;流程图-&gt;程序</span></span><br></pre></td></tr></table></figure></li><li><p>猜字游戏</p></li><li><p>整数分解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取整</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">765</span>;</span><br><span class="line"><span class="keyword">int</span> intnum1 = num/<span class="number">100</span>; <span class="comment">// 7</span></span><br><span class="line"><span class="keyword">int</span> intnum2 = (num - intnum1*<span class="number">100</span>)/<span class="number">10</span> <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 取余</span></span><br><span class="line"><span class="keyword">int</span> intnum3 = num%<span class="number">100</span> <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><ul><li><p>for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环像一个计数循环：设定一个计数器，初始化它，然后在计数器到达某值之前，重复执行循环体，而每</span></span><br><span class="line"><span class="comment">// 执行一轮循环，计数器值以一定步进进行调整</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i+<span class="number">1</span>) &#123;</span><br><span class="line">  System.out.pringln(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for ( 初始化; 条件; 步进调整 ) &#123;</span></span><br><span class="line"><span class="comment">//  // TODO</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// for == while</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( i&lt;<span class="number">5</span> )&#123;</span><br><span class="line">  System.out.pringln(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环次数的确定</span></span><br></pre></td></tr></table></figure></li><li><p>循环的选择</p><ul><li>如果有固定的次数，用for</li><li>如果必须执行一次，用do_while</li><li>其他情况用while</li></ul></li><li><p>符合赋值</p></li><li><p>循环控制</p><ul><li><p>求解素数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> isPrime = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++ ) &#123;</span><br><span class="line">  <span class="keyword">if</span> ( n%i == <span class="number">0</span> ) &#123;</span><br><span class="line">    isPrime = <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">"不是素数"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">if</span> ( isPrime==<span class="number">1</span> )&#123;</span><br><span class="line">    System.out.println(<span class="string">"是素数"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"不是素数"</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>break 与 continue</p><ul><li>break：跳出循环</li><li>continue：跳过循环这一轮剩下的语句进入下一轮</li><li>label: 在循环前防一个标号来标示循环，带标号的break和continue对那个循环起作用</li></ul></li></ul></li><li><p>多重循环（嵌套循环）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 100以内的素数</span></span><br></pre></td></tr></table></figure></li><li><p>逻辑类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 逻辑运算</span></span><br><span class="line">x &gt; <span class="number">4</span> &amp;&amp; x &lt; <span class="number">6</span>  <span class="comment">// 4&lt;x&lt;6</span></span><br><span class="line"><span class="comment">// 优先级</span></span><br><span class="line">!&gt;&amp;&amp;&gt;||</span><br></pre></td></tr></table></figure></li><li><p>循环例子</p><ul><li>求和</li><li>最大公约数（辗转相除法）</li></ul></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>初识数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 定义数组变量</span></span><br><span class="line"><span class="keyword">int</span>[] grades= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">double</span>[] averages= <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">20</span>];</span><br></pre></td></tr></table></figure></li><li><p>数组的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有效的下标</span></span><br><span class="line"><span class="comment">// 长度</span></span><br><span class="line">array.length();</span><br></pre></td></tr></table></figure></li><li><p>数组变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接初始化数组</span></span><br><span class="line"><span class="keyword">int</span>[] scores = &#123;<span class="number">11</span>, <span class="number">33</span>, <span class="number">55</span>, <span class="number">77</span>, <span class="number">90</span>&#125;;</span><br><span class="line"><span class="comment">// 数组变量赋值</span></span><br><span class="line"><span class="comment">// 数组赋值、比较、管理权限</span></span><br><span class="line"><span class="comment">// 数组复制 &gt; 遍历</span></span><br></pre></td></tr></table></figure></li><li><p>遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;data.length; i++ )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (x == data[i])</span><br><span class="line">  &#123;</span><br><span class="line">    loc = i;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for-each循环，不可修改数组元素，可读取数组中的元素</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> k : data )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( k == x )</span><br><span class="line">  &#123;</span><br><span class="line">    found = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>素数求解的各种方法（思路）</p></li><li><p>二维数组 &gt; 多维数组</p></li></ul><h3 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h3><ul><li><p>字符类型</p></li><li><p>包裹类型</p></li><li><p>字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串变量</span></span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"a string"</span>);</span><br><span class="line"><span class="comment">// 字符串连接</span></span><br><span class="line">string1 + string2</span><br><span class="line">string + number</span><br><span class="line"><span class="comment">// 比较两个字符串</span></span><br><span class="line"><span class="comment">// 比较是否同一个</span></span><br><span class="line"><span class="keyword">if</span>(input == <span class="string">"bye"</span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较内容是否相同</span></span><br><span class="line"><span class="keyword">if</span>(input.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 字符串操作</span></span><br><span class="line"><span class="comment">// 大小比较</span></span><br><span class="line">s1.compareTo(s2);</span><br><span class="line"><span class="comment">// 字符串的长度</span></span><br><span class="line">str1.length();</span><br><span class="line"><span class="comment">// 访问String里的字符,不能用for-each循环遍历字符串</span></span><br><span class="line">s.chartAt(index);</span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line">s.substring(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 查找字符位置</span></span><br><span class="line">s.indexOf(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 其他</span></span><br><span class="line">startsWith、endsWith、trim、replace、toLowerCase、toUpperCase</span><br><span class="line"><span class="comment">// 所有的字符串操作都不能改变原字符串的值</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>函数定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数头（返回类型、函数名、参数表）</span></span><br><span class="line"><span class="comment">// 函数体</span></span><br></pre></td></tr></table></figure></li><li><p>函数调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传值</span></span><br><span class="line"><span class="comment">// 形参，实参</span></span><br><span class="line"><span class="comment">// 本地变量，局部变量，全局变量</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;用程序来做计算&quot;&gt;&lt;a href=&quot;#用程序来做计算&quot; class=&quot;headerlink&quot; title=&quot;用程序来做计算&quot;&gt;&lt;/a&gt;用程序来做计算&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装编程软件：Eclipse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第一个Java程序
      
    
    </summary>
    
      <category term="Java" scheme="https://sophoraflower.github.io/EverQuest/categories/Java/"/>
    
      <category term="编程基础" scheme="https://sophoraflower.github.io/EverQuest/categories/Java/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://sophoraflower.github.io/EverQuest/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>EverQuest201712</title>
    <link href="https://sophoraflower.github.io/EverQuest/2017/1130/EverQuest-2017-12/"/>
    <id>https://sophoraflower.github.io/EverQuest/2017/1130/EverQuest-2017-12/</id>
    <published>2017-11-30T12:08:08.000Z</published>
    <updated>2018-02-02T17:20:46.383Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=32785674&auto=1&height=66"></iframe><h3 id="2017年11月30日"><a href="#2017年11月30日" class="headerlink" title="2017年11月30日"></a>2017年11月30日</h3><ul><li>python代码500~1000行</li><li>《Python核心编程》- 正则表达式</li><li>Python3 + requests + cookies：模拟用户登录/登录接口测试/多用户模拟</li><li>职业规划（12月待考虑问题）<ul><li>语言选择问题：C还是C++还是JAVA？</li><li>日本IT市场（互联网、游戏、公司、开发环境、成长空间、对比国内）</li><li>深造的可能性（AI、大数据）</li><li>语言问题（N2、N1准备，托业准备）</li><li>什么时候去日本、待的时间、回国后怎么发展、婚姻、家庭、子女成长及教育</li><li>……</li></ul></li></ul><h3 id="2017年12月01日"><a href="#2017年12月01日" class="headerlink" title="2017年12月01日"></a>2017年12月01日</h3><ul><li>需要登录接口测试用例模板</li><li>JMeter压力测试 + 自动化（Jenkins + Ant + JMeter）</li><li>HTTP协议</li><li>CSDN学习日志每周汇总（争取每个月总结不少于10篇）</li><li><p>职业规划（12月待考虑问题）</p><ul><li>语言选择问题：C还是C++还是JAVA？</li><li>高级测试的发展前景</li><li>托业学习计划</li><li>淘宝、蚂蚁金服、阿里云、支付宝准备（明年七月~九月）：招聘要求、技能</li><li><p>工作日及周日时间安排</p><p> ​</p></li></ul></li></ul><h3 id="2017年12月02日"><a href="#2017年12月02日" class="headerlink" title="2017年12月02日"></a>2017年12月02日</h3><ul><li><p>熟悉使用JMeter等性能测试工具，有二次开发经验优先；</p></li><li><p>熟悉使用Linux系统；</p></li><li><p>熟悉Nginx、Redis等应用服务器配置与管理；</p></li><li><p>熟悉掌握MySQL、mongodb等常用数据库系统的操作，能熟练编写复杂SQL语句；</p></li><li><p>大型网站性能测试经验；</p></li><li><p>深入了解HTTP、TCP/IP等网络协议，熟悉J2EE Web系统，熟悉掌握多种中间件（Tomcat、Apache、Nginx、MQ等）各项性能参数设置、监控及优化；</p></li><li><p>Web安全、安全测试、渗透测试</p></li><li><p>shell、javascript、Python 脚本语言</p></li><li><p>Java语言</p></li><li><p>计算机基础（长久性学习）</p><p>​</p></li></ul><h3 id="2017年12月03日"><a href="#2017年12月03日" class="headerlink" title="2017年12月03日"></a>2017年12月03日</h3><ul><li>Java（核心） &gt;  Web方向</li><li>计算机基础（计算机网络、操作系统、计算机组成原理、算法、数据库）</li><li>Python开发（自动化测试、爬虫、数据分析、Web）</li><li>数据可视化、性能测试</li><li>Language：English &gt;  TOEIC</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="EverQuest" scheme="https://sophoraflower.github.io/EverQuest/categories/EverQuest/"/>
    
    
  </entry>
  
  <entry>
    <title>Unittest单元测试框架</title>
    <link href="https://sophoraflower.github.io/EverQuest/2017/0909/Unittest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>https://sophoraflower.github.io/EverQuest/2017/0909/Unittest单元测试框架/</id>
    <published>2017-09-09T15:35:00.000Z</published>
    <updated>2018-01-21T23:49:39.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单元测试框架功能"><a href="#单元测试框架功能" class="headerlink" title="单元测试框架功能"></a>单元测试框架功能</h3><p>&emsp;&emsp;提供用例编写规范与批量执行，提供丰富的断言方法，例如断言相等/不相等、包含/不包含，True/Flase等，提供丰富的测试日志（失败信息、成功用例数、执行时间）。</p><ul><li>常见自动化测试框架+工具：<ul><li>HTTP接口自动化测试：unittest + Requests</li><li>Web UI自动化测试：unittest（TestNG） + Selenium</li><li>移动自动化测试：unittest + Appium</li></ul></li></ul><h3 id="测试用例编写"><a href="#测试用例编写" class="headerlink" title="测试用例编写"></a>测试用例编写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamesInfo</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">  <span class="string">"""获取游戏列表"""</span></span><br><span class="line">  <span class="comment"># https://apis.zhanqi.tv/static/v2.2/tv/games.json</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.url = <span class="string">'https://apis.zhanqi.tv/static/v2.2/tv/games.json'</span></span><br><span class="line">    mylog.info(<span class="string">"接口:获取游戏列表，测试开始"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">    mylog.info(<span class="string">"接口:获取游戏列表，测试完成"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_gamesInfo_success</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""获取成功"""</span></span><br><span class="line">    r = requests.get(self.url)</span><br><span class="line">    self.response_data = r.json()</span><br><span class="line">    self.assertEqual(self.response_data[<span class="string">'code'</span>], <span class="number">0</span>, msg=<span class="string">'ERROR:获取失败'</span>)</span><br><span class="line">    self.assertEqual(self.response_data[<span class="string">'message'</span>], <span class="string">'OK'</span>, msg=<span class="string">'ERROR:返回值错误'</span>)</span><br><span class="line">    print(self.response_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_roomInfo_games</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""直播间列表"""</span></span><br><span class="line">    r = requests.get(self.url)</span><br><span class="line">    self.response_data = r.json()</span><br><span class="line">    self.assertTrue(isinstance(self.response_data[<span class="string">'data'</span>], list), msg=<span class="string">"ERROR:返回数据类型错误"</span>)</span><br><span class="line">    print(self.response_data[<span class="string">'data'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直播间列表 - game结构</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_roomInfo_img</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""游戏图"""</span></span><br><span class="line">    r = requests.get(self.url)</span><br><span class="line">    self.response_data = r.json()</span><br><span class="line">    self.assertTrue(self.response_data[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'img'</span>], msg=<span class="string">"ERROR:游戏图为空"</span>)</span><br><span class="line">    print(self.response_data[<span class="string">'data'</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;首先，通过import导入unittest测试框架。创建GamesInfo类继承unittest.TestCase类。setUp()和tearDown()两个方法分别在每一个测试用例的开始和结束时执行。setUp()用于测试用例执行前的初始化工作，例如初始化变量、生成数据库测试数据、打开浏览器等。tearDown()方法用于测试用例执行之后的善后工作，例如清除数据库测试数据、关闭文件、关闭浏览器等。<br>&emsp;&emsp;unittest要求测试用例（方法）必须以“test”开头。例如test_gamesInfo_success、test_roomInfo_games等。</p><h3 id="执行测试用例"><a href="#执行测试用例" class="headerlink" title="执行测试用例"></a>执行测试用例</h3><ul><li>方案一：unittest.main()方法会搜索该模块下所有以test开头的测试用例方法，并自动执行它们。执行顺序是命名顺序：先执行test_case1，再执行test_case2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><ul><li><p>方案二：</p><ul><li><p>先构造测试集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">suite=unittest.TestSuite()  <span class="comment"># 实例化测试套件将测试用例加载到测试套件中。</span></span><br></pre></td></tr></table></figure></li><li><p>执行顺序是安装加载顺序：先执行test_case2，再执行test_case1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">suite.addTest(Test(<span class="string">'test_case2'</span>))</span><br><span class="line">suite.addTest(Test(<span class="string">'test_case1'</span>))</span><br></pre></td></tr></table></figure></li><li><p>执行测试用例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runner=unittest.TextTestRunner()  <span class="comment"># 实例化TextTestRunner类</span></span><br><span class="line">runner.run(suite)  <span class="comment"># 使用run()方法运行测试套件（即运行测试套件中的所有用例）</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>方案三：</p><ul><li><p>构造测试集（简化了方案二中先要创建测试套件然后再依次加载测试用例），执行顺序同方案一：执行顺序是命名顺序：先执行test_case1，再执行test_case2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_dir = <span class="string">'./'</span></span><br><span class="line">discover= unittest.defaultTestLoader.discover(test_dir, pattern=<span class="string">'test_*.py'</span>)</span><br></pre></td></tr></table></figure></li><li><p>执行测试用例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runner=unittest.TextTestRunner()  <span class="comment"># 实例化TextTestRunner类</span></span><br><span class="line">runner.run(discover)   <span class="comment">#使用run()方法运行测试套件（即运行测试套件中的所有用例）</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="常用断言方法-assert"><a href="#常用断言方法-assert" class="headerlink" title="常用断言方法(assert*)"></a>常用断言方法(assert*)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">assertEqual(a, b, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言a和b是否相等，相等则测试用例通过</span></span><br><span class="line">assertNotEqual(a, b, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言a和b是否相等，不相等则测试用例通过</span></span><br><span class="line">assertTrue(x, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言x是否True，是True则测试用例通过</span></span><br><span class="line">assertFalse(x, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言x是否False，是False则测试用例通过</span></span><br><span class="line">assertIs(a, b, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言a是否是b，是则测试用例通过</span></span><br><span class="line">assertNotIs(a, b, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言a是否是b，不是则测试用例通过</span></span><br><span class="line">assertIsNone(x, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言x是否None，是None则测试用例通过</span></span><br><span class="line">assertIsNotNone(x, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言x是否None，不是None则测试用例通过</span></span><br><span class="line">assertIn(a, b, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言a是否在b中，在b中则测试用例通过</span></span><br><span class="line">assertNotIn(a, b, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言a是否在b中，不在b中则测试用例通过</span></span><br><span class="line">assertIsInstance(a, b, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言a是是b的一个实例，是则测试用例通过</span></span><br><span class="line">assertNotIsInstance(a, b, msg=<span class="string">'测试失败时打印的信息'</span>)  <span class="comment"># 断言a是是b的一个实例，不是则测试用例通过</span></span><br></pre></td></tr></table></figure><p><strong>推荐文档</strong>：<a href="https://www.cnblogs.com/yufeihlf/p/5707929.html" target="_blank" rel="noopener">Unittest单元测试框架总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单元测试框架功能&quot;&gt;&lt;a href=&quot;#单元测试框架功能&quot; class=&quot;headerlink&quot; title=&quot;单元测试框架功能&quot;&gt;&lt;/a&gt;单元测试框架功能&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;提供用例编写规范与批量执行，提供丰富的断言方法，例如断言相等/不相等
      
    
    </summary>
    
      <category term="Python" scheme="https://sophoraflower.github.io/EverQuest/categories/Python/"/>
    
      <category term="自动化测试" scheme="https://sophoraflower.github.io/EverQuest/categories/Python/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="python" scheme="https://sophoraflower.github.io/EverQuest/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>D3.js小结</title>
    <link href="https://sophoraflower.github.io/EverQuest/2017/0528/D3.js%20%E5%B0%8F%E7%BB%93/"/>
    <id>https://sophoraflower.github.io/EverQuest/2017/0528/D3.js 小结/</id>
    <published>2017-05-28T13:13:00.000Z</published>
    <updated>2018-01-20T23:48:45.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="D3：数据可视化库-D3-4-0"><a href="#D3：数据可视化库-D3-4-0" class="headerlink" title="D3：数据可视化库(D3 4.0+)"></a>D3：数据可视化库(D3 4.0+)</h3><p>&emsp;&emsp;D3是目前最流行的JavaScript可视化图表库之一，D3的图表类型非常丰富，并且支持SVG格式，因此应用十分广泛，也有很多图表插件基于D3开发，比如MetricsGraphics.js，在D3上构建的数据图表非常强大。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用D3对象</span></span><br><span class="line"><span class="comment">// select()方法返回一个对DOM中匹配的第一个元素的引用</span></span><br><span class="line">d3.select(<span class="string">"body"</span>)</span><br><span class="line">  <span class="comment">// append()会创建一个新的DOM元素,然后把它追加到调用它的元素末尾</span></span><br><span class="line">  .append(<span class="string">"p"</span>)</span><br><span class="line">  <span class="comment">// text()接受一个字符串，把它插入到当前元素的开始和结束标签之间</span></span><br><span class="line">  .text(<span class="string">"New paragraph!"</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d3.select(<span class="string">"body"</span>)</span><br><span class="line">  <span class="comment">// 选择DOM中的所以段落。没有段落时，返回空元素</span></span><br><span class="line">  .selectAll(<span class="string">"p"</span>)</span><br><span class="line">  <span class="comment">// 解析并输出数据值</span></span><br><span class="line">  .data(dataset)</span><br><span class="line">  <span class="comment">// 创建新的绑定数据的元素（占位元素）</span></span><br><span class="line">  .enter()</span><br><span class="line">  .append(<span class="string">"p"</span>)</span><br><span class="line">  .text(<span class="string">"New paragraph"</span>);</span><br></pre></td></tr></table></figure><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><h4 id="加载CSV数据"><a href="#加载CSV数据" class="headerlink" title="加载CSV数据"></a>加载CSV数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d3.csv(&quot;xxx.csv&quot;, function(error, data)&#123;</span><br><span class="line">    if (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 把CSV数据交给全局变量</span><br><span class="line">        dataset = data;</span><br><span class="line">        // 调用生成可视化图标的其他函数</span><br><span class="line">        generateVis();</span><br><span class="line">        hideLoadingMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="加载JSON数据"><a href="#加载JSON数据" class="headerlink" title="加载JSON数据"></a>加载JSON数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d3.json(&quot;waterfallvelocities.json&quot;, function(json)&#123;</span><br><span class="line">     console.log(json);</span><br><span class="line">     // todo json data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建SVG元素</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="number">500</span>, h = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</span><br><span class="line">            .append(<span class="string">"svg"</span>)</span><br><span class="line">            .attr(<span class="string">"width"</span>, w)</span><br><span class="line">            .attr(<span class="string">"height"</span>, h);</span><br><span class="line"><span class="keyword">var</span> dataset = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建圆形</span></span><br><span class="line"><span class="keyword">var</span> circles = svg.selectAll(<span class="string">"circle"</span>)</span><br><span class="line">                 .data(dataset)</span><br><span class="line">                 .enter()</span><br><span class="line">                 .append(<span class="string">"circle"</span>);</span><br><span class="line"><span class="comment">// i为从0开始的整数，d为dataset[i]</span></span><br><span class="line">circles.attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> (i * <span class="number">50</span>) + <span class="number">25</span>;</span><br><span class="line">           &#125;)</span><br><span class="line">        .attr(<span class="string">"cy"</span>, h/<span class="number">2</span>)</span><br><span class="line">        .attr(<span class="string">"r"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> d;</span><br><span class="line">           &#125;)</span><br><span class="line">        <span class="comment">// 填充</span></span><br><span class="line">        .attr(<span class="string">"fill"</span>, <span class="string">"yellow"</span>)</span><br><span class="line">        <span class="comment">// 描边</span></span><br><span class="line">        .attr(<span class="string">"stroke"</span>, <span class="string">"orange"</span>)</span><br><span class="line">        .attr(<span class="string">"stroke-width"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> d/<span class="number">2</span>;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp;<img src="http://img.blog.csdn.net/20170528193846347?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZWp1bHllcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="number">500</span>, h = <span class="number">100</span>, barpadding = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> dataset = [ <span class="number">15</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">60</span>, <span class="number">55</span>, <span class="number">34</span>, <span class="number">19</span>, <span class="number">57</span>, <span class="number">99</span>, <span class="number">55</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">56</span>, <span class="number">33</span>, <span class="number">24</span> ];</span><br><span class="line">    <span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>).attr(<span class="string">"width"</span>, w).attr(<span class="string">"height"</span>, h);</span><br><span class="line">    <span class="comment">// 创建矩形</span></span><br><span class="line">    svg.selectAll(<span class="string">"rect"</span>).data(dataset).enter().append(<span class="string">"rect"</span>)</span><br><span class="line">        .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i * (w / dataset.length);</span><br><span class="line">        &#125;).attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> h - d;</span><br><span class="line">        &#125;).attr(<span class="string">"width"</span>, w / dataset.length - barpadding).attr(<span class="string">"height"</span>, <span class="number">100</span>)</span><br><span class="line">        .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"rgb(0, 0, "</span> + (d * <span class="number">10</span>) + <span class="string">")"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">// 值标签</span></span><br><span class="line">    svg.selectAll(<span class="string">"text"</span>).data(dataset).enter().append(<span class="string">"text"</span>)</span><br><span class="line">        .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d; &#125;)</span><br><span class="line">        .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i * (w / dataset.length) + <span class="number">11</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (h-d) + (h-(h-d))/<span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .attr(<span class="string">"font-family"</span>, <span class="string">"sans-serif"</span>)</span><br><span class="line">        .attr(<span class="string">"font-size"</span>, <span class="string">"11px"</span>)</span><br><span class="line">        .attr(<span class="string">"fill"</span>, <span class="string">"white"</span>)</span><br><span class="line">        <span class="comment">// 水平居中文本</span></span><br><span class="line">        .attr(<span class="string">"text-anchor"</span>, <span class="string">"middle"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170528195606418?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZWp1bHllcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="比例尺和数轴"><a href="#比例尺和数轴" class="headerlink" title="比例尺和数轴"></a>比例尺和数轴</h3><h4 id="创建通用的数轴函数"><a href="#创建通用的数轴函数" class="headerlink" title="创建通用的数轴函数"></a>创建通用的数轴函数</h4><p>原写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xAxis = d3.svg.axis();</span><br><span class="line">xAxis.scale(xScale);</span><br><span class="line">xAxis.orient(bottom);</span><br></pre></td></tr></table></figure><p>最新写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xAxis = d3.axisBottom().scale(xScale);</span><br><span class="line"><span class="keyword">var</span> yAxis = d3.axisLeft()</span><br><span class="line">              .scale(yScale);</span><br></pre></td></tr></table></figure><h4 id="创建线性比例尺"><a href="#创建线性比例尺" class="headerlink" title="创建线性比例尺"></a>创建线性比例尺</h4><p>原写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xScale = d3.scale.linear().domain([<span class="number">0</span>, <span class="number">100</span>]).range(<span class="number">0</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>最新写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xScale = d3.scaleLinear().domain([<span class="number">0</span>, <span class="number">100</span>]).range(<span class="number">0</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h4 id="散点图示例"><a href="#散点图示例" class="headerlink" title="散点图示例"></a>散点图示例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.axis</span> <span class="selector-tag">path</span>,</span><br><span class="line"><span class="selector-class">.axis</span> <span class="selector-tag">line</span> &#123;</span><br><span class="line"><span class="attribute">fill</span>: none;</span><br><span class="line"><span class="attribute">stroke</span>: black;</span><br><span class="line"><span class="attribute">shape-rendering</span>: crispEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.axis</span> <span class="selector-tag">text</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: sans-serif;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//Width and height</span></span><br><span class="line">   <span class="keyword">var</span> w = <span class="number">500</span>;</span><br><span class="line">   <span class="keyword">var</span> h = <span class="number">300</span>;</span><br><span class="line">   <span class="keyword">var</span> padding = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Dynamic, random dataset</span></span><br><span class="line">   <span class="keyword">var</span> dataset = [];  <span class="comment">//Initialize empty array</span></span><br><span class="line">   <span class="keyword">var</span> numDataPoints = <span class="number">50</span>;<span class="comment">//Number of dummy data points to create</span></span><br><span class="line">   <span class="keyword">var</span> xRange = <span class="built_in">Math</span>.random() * <span class="number">1000</span>; <span class="comment">//Max range of new x values</span></span><br><span class="line">   <span class="keyword">var</span> yRange = <span class="built_in">Math</span>.random() * <span class="number">1000</span>; <span class="comment">//Max range of new y values</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numDataPoints; i++) &#123;</span><br><span class="line">       <span class="comment">//Loop numDataPoints times</span></span><br><span class="line">       <span class="keyword">var</span> newNumber1 = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * xRange); </span><br><span class="line">       <span class="keyword">var</span> newNumber2 = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * yRange);</span><br><span class="line">       dataset.push([newNumber1,newNumber2]);        </span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//Create scale functions</span></span><br><span class="line">   <span class="keyword">var</span> xScale = d3.scaleLinear()</span><br><span class="line">                        .domain([<span class="number">0</span>, d3.max(dataset, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d[<span class="number">0</span>]; &#125;)])</span><br><span class="line">                        .range([padding, w - padding * <span class="number">2</span>]);</span><br><span class="line">   <span class="keyword">var</span> yScale = d3.scaleLinear()</span><br><span class="line">                        .domain([<span class="number">0</span>, d3.max(dataset, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d[<span class="number">1</span>]; &#125;)])</span><br><span class="line">                        .range([h - padding, padding]);</span><br><span class="line">   <span class="keyword">var</span> rScale = d3.scaleLinear()</span><br><span class="line">                        .domain([<span class="number">0</span>, d3.max(dataset, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d[<span class="number">1</span>]; &#125;)])</span><br><span class="line">                        .range([<span class="number">2</span>, <span class="number">5</span>]);</span><br><span class="line">   <span class="comment">//Define X axis</span></span><br><span class="line">   <span class="keyword">var</span> xAxis = d3.axisBottom()</span><br><span class="line">                   .scale(xScale)</span><br><span class="line">                   .ticks(<span class="number">5</span>);</span><br><span class="line">   <span class="comment">//Define Y axis</span></span><br><span class="line">   <span class="keyword">var</span> yAxis = d3.axisLeft()</span><br><span class="line">                 .scale(yScale)</span><br><span class="line">                 .ticks(<span class="number">5</span>);</span><br><span class="line">   <span class="comment">//Create SVG element</span></span><br><span class="line">   <span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</span><br><span class="line">               .append(<span class="string">"svg"</span>)</span><br><span class="line">               .attr(<span class="string">"width"</span>, w)</span><br><span class="line">               .attr(<span class="string">"height"</span>, h);</span><br><span class="line">   <span class="comment">//Create circles</span></span><br><span class="line">   svg.selectAll(<span class="string">"circle"</span>)</span><br><span class="line">      .data(dataset)</span><br><span class="line">      .enter()</span><br><span class="line">      .append(<span class="string">"circle"</span>)</span><br><span class="line">      .attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> xScale(d[<span class="number">0</span>]);</span><br><span class="line">      &#125;)</span><br><span class="line">      .attr(<span class="string">"cy"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> yScale(d[<span class="number">1</span>]);</span><br><span class="line">      &#125;)</span><br><span class="line">      .attr(<span class="string">"r"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> rScale(d[<span class="number">1</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="comment">//Create labels</span></span><br><span class="line">  svg.selectAll(<span class="string">"text"</span>)</span><br><span class="line">     .data(dataset)</span><br><span class="line">     .enter()</span><br><span class="line">     .append(<span class="string">"text"</span>)</span><br><span class="line">     .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> d[<span class="number">0</span>] + <span class="string">","</span> + d[<span class="number">1</span>];</span><br><span class="line">     &#125;)</span><br><span class="line">     .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> xScale(d[<span class="number">0</span>]);</span><br><span class="line">     &#125;)</span><br><span class="line">     .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> yScale(d[<span class="number">1</span>]);</span><br><span class="line">     &#125;)</span><br><span class="line">     .attr(<span class="string">"font-family"</span>, <span class="string">"sans-serif"</span>)</span><br><span class="line">     .attr(<span class="string">"font-size"</span>, <span class="string">"11px"</span>)</span><br><span class="line">     .attr(<span class="string">"fill"</span>, <span class="string">"red"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//Create X axis</span></span><br><span class="line">  svg.append(<span class="string">"g"</span>)</span><br><span class="line">      .attr(<span class="string">"class"</span>, <span class="string">"axis"</span>)</span><br><span class="line">      .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + (h - padding) + <span class="string">")"</span>)</span><br><span class="line">      .call(xAxis);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//Create Y axis</span></span><br><span class="line">  svg.append(<span class="string">"g"</span>)</span><br><span class="line">      .attr(<span class="string">"class"</span>, <span class="string">"axis"</span>)</span><br><span class="line">      .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + padding + <span class="string">",0)"</span>)</span><br><span class="line">      .call(yAxis);</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170528210814937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZWp1bHllcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="更新，过渡和动画"><a href="#更新，过渡和动画" class="headerlink" title="更新，过渡和动画"></a>更新，过渡和动画</h3><h3 id="交互式图表"><a href="#交互式图表" class="headerlink" title="交互式图表"></a>交互式图表</h3><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;D3：数据可视化库-D3-4-0&quot;&gt;&lt;a href=&quot;#D3：数据可视化库-D3-4-0&quot; class=&quot;headerlink&quot; title=&quot;D3：数据可视化库(D3 4.0+)&quot;&gt;&lt;/a&gt;D3：数据可视化库(D3 4.0+)&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;ems
      
    
    </summary>
    
      <category term="Web前端" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="javascript" scheme="https://sophoraflower.github.io/EverQuest/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>软件测试管理</title>
    <link href="https://sophoraflower.github.io/EverQuest/2017/0424/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86/"/>
    <id>https://sophoraflower.github.io/EverQuest/2017/0424/软件测试管理/</id>
    <published>2017-04-24T15:35:00.000Z</published>
    <updated>2018-01-20T23:46:46.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章依据<a href="http://www.51testing.com/html/77/n-240077-3.html" target="_blank" rel="noopener">《我是怎样做测试管理的？》</a>，<a href="http://www.educity.cn/se/621298.html" target="_blank" rel="noopener">《测试管理的一点心得体会》</a>，对测试管理过程做了简单的描述和总结。</p></blockquote><h2 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h2><h3 id="有方法与无方法"><a href="#有方法与无方法" class="headerlink" title="有方法与无方法"></a>有方法与无方法</h3><p>&emsp;<strong>公司现状</strong>：<strong>创业</strong>公司，误打误撞进了软件这一行当，但软件这行是否可以持续走，是否要持续走，BOSS还不确定，如果卖的不好就不做软件了，改做别的。现在是<strong>生存阶段</strong>，有项目就接上。上面有BOSS关系搞定，下面有老实的干活人努力加班，项目也就过得去。</p><p>&emsp;<strong>软件测试</strong>：<strong>公司发动了所有实施顾问来测试，只有他们通过，才能去实施</strong>。实施顾问大多来自刚刚毕业的<strong>应届毕业生</strong>，对企业管理，对软件，对行业领域，都<strong>一无所知</strong>。对测试更是一窍不通。<strong>测试并没有分工，每个人都测试软件。也没有什么测试方法，也没有什么测试计划，也不知道该测什么</strong>。反正也是对软件不了解，就当是深入学习软件。</p><p>&emsp;<strong>遇到问题</strong>：开始并没有测试报告，大家发现问题，就用电话或QQ或邮件，把问题发给开发人员。谁认识那个开发人员，就发给那个开发人员，如果不认识一个开发人员，就发给老板了。报告中尽是不好用，不能用的词汇。但什么功能不好用，是怎么操作导致不好用，不好用的具体表现是什么，都没有。老板急眼了，怎么这么多问题。 </p><p>&emsp;<strong>原因分析</strong>：</p><ol><li>很多问题都是每个人都反映了，其实只有一个问题，只不过大家没有分工，都测试，于是都报告；</li><li>不少人见一个问题发一个邮件，所以看起来很多；</li><li>有的人测试只是随便乱点乱输入，咱们软件还没有做这种破坏性操作兼容防范；</li><li>不少人不了解功能，不了解行业，不了解业务，本来是对的，按他的理解是错的；</li><li>有些人偷懒，今天发的是这些问题反馈，后天又是同样。</li></ol><p>&emsp;<strong>解决措施</strong>：</p><ol><li><strong>分工测</strong>，几个人测试一块功能；</li><li>不全部测，只测试那些很常用的<strong>重点功能</strong>；</li><li>不要电话、QQ、邮件来报告给单独的开发人员，给我一个人发就可以了，我来判断衡量安排。也不要随时报告。每天下班的时候来<strong>统一发送</strong>，<strong>由各个测试小组的负责人来汇总自己组内的测试</strong>，并且把<strong>重复的问题合并掉</strong>；</li><li>每个测试小组的每天的<strong>测试报告要连续在一起</strong>，不要今天发今天的测试EXCEL，明天是明天的测试EXCEL，这样没有连贯性；</li><li><strong>每个问题，要标好功能模块，有测试人，有测试版本号，有测试时间，有测试操作过程，有测试输入数据，有报错截图</strong>；</li><li><strong>先测试正常的数据输入，正常的操作流程，是否能全部流程走通，是否数据保存正常，是否保存后的数据还能正确的取出来。</strong>那些临界条件测试先不要做。对于功能不易操作、界面不好看、起的窗口标题是否得当，字体是否加粗这些需求不要提。咱们目前阶段的重点是<strong>测试问题，不要把需求和找问题混在一起。</strong></li></ol><h3 id="巧妇难为无米之炊"><a href="#巧妇难为无米之炊" class="headerlink" title="巧妇难为无米之炊"></a>巧妇难为无米之炊</h3><p>&emsp;<strong>公司现状</strong>：第一批客户的实施终于启动了，实施顾问奔向了全国。随着项目的实施，公司渐渐拢回来不少钱，但是面临了一个瓶颈，这个大项目快做完了，以后有什么活能养活现在这么多人呢。所以，最好的做法就是把现在这个项目产生的软件改改，变成一个产品，卖给其他的客户，卖的越多越好。但是，其他客户我们有关系的并不多，所以要想销售给其他客户，必须拿产品说话。于是，研发部陆续加入了专职的测试人员、文案人员、美工人员，旨在提高产品的质量和包装，希望能卖个好价格。所以说，专职的测试人员是这么来的。</p><p>&emsp;<strong>软件测试</strong>：很多软件公司没有测试人员，其原因就是老板搞定关系，程序员老实干活，项目质量虽然不行，但也能将就把钱结了。既然能赚钱，干嘛要测试人员呢。除非由于质量问题，签不到单子。除非由于质量问题，客户不验收不给尾款。除非公司所有人都测试还是无法达到客户满意的质量。只有这样，才会招聘专职的专业的测试人员。测试人员一来了，开始工作。但<strong>怎么开展测试呢？文档在哪里？</strong></p><p>&emsp;<strong>遇到问题</strong>：</p><ol><li>对测试，对软件，对业务的理解肤浅。过去发现的问题都是小儿科，真正复杂的问题根本没有测试到。给客户一讲解，客户一问，发现原来很多功能细节没有理解，不知道怎么给客户解释；</li><li>文档只有很老的设计文档，现在软件和文档已经毫无关系；</li><li>测试人员硬着头皮，开始学习软件，什么是正确的什么是不正确的，测试人员也不知道，当然也不知道BUG究竟是什么样。软件质量仍然没有改进。</li><li>帮助在哪里？没有？因为没有写帮助文件的人。只有打单的时候讲解的PPT；</li><li>改进初期，测试来测试去，其测试结果和实施人员的测试没多大区别，都还是在门外转。</li><li>老板问：这个测试人员是不是没啥能力？要不要裁掉？</li></ol><p>&emsp;<strong>原因分析</strong>：</p><ol><li>实施顾问对软件本身的理解思路和自身的理解层次，其次是用户（客户）理解能力的高低及要求；</li><li>都是程序员，谁来专门写文档。为了公司生存，我身兼数职，到处开会做项目经理或做售前，还管开发人员，还有实施人员给我打电话问软件中某个功能怎么回事，我也分身无术；都是根据实施人员、客户、销售人员、老板反映的需求和BUG修改。那些BUG和需求EXCEL表格倒是有，但没法作为测试案例编写的根据。</li><li>没有写帮助文件的人。只有打单的时候讲解的PPT。</li><li>由于几年发展，软件加入了大量客户的需求，很多细节的东西在帮助中也没有看到，测试人员也不知道有这个功能。</li></ol><p>&emsp;<strong>解决措施</strong>：</p><ol><li>一方面仍然要求他们<strong>按照过去的测试问题报告流程和方法来报告实施现场中发现的问题</strong>，另一方面我自己<strong>写了FAQ给实施顾问发出去</strong>。但是实施顾问仍然问，一个问题重复的问。我说你看FAQ的第XX行。他说他看了，但没看明白（其实是对客户业务不了解，所以也不明白功能）。我就给他再解释。经过多次解释，我也了解了实施顾问的理解思路和理解层次，于是不断修正FAQ，使FAQ1.0、FAQ1.1.1这样不断发布，几乎天天发布。我现在回过头来想，帮助文件写的好不好，不能你说你自己已经写的很明白了傻瓜才看不懂，不要这样认为，这样根本不解决问题。唯一的方法就是用户理解能力有多低，你就要把帮助写的有多低，让他理解是目的，要不你还能怎样呢，就这样的人，问题还得解决。</li><li>文案人员也不了解软件，她写出来的也是自己猜测，所以我已经分出来一个开发人员做项目经理，他目前专门负责把帮助文档建立起来，但是他开发人员出身不擅长写文档，但他熟知软件，所以只有他们<strong>两个人搭配</strong>才能搞定。但这种磨合，需要时间。</li><li>测试人员硬着头皮，一边测试人员<strong>瞎学习瞎测试</strong>，一边<strong>项目经理和文案人员不断讲解不断编写不断审核不断修改</strong>。</li><li><strong>巧妇难为无米之炊</strong>。果不其然，测试人员有其独到的软件测试方法、软件理解方法。很快，测试人员对软件的理解不亚于那些多年的实施顾问，也不亚于程序员。找问题也越来越准确，越来越深入。<br>当然，其原因也在于这个团队的成长，有专职的项目经理开始书写现有功能需求修改的设计文档。过去的，没有的，就让它过去，就让它缺失吧，但未来，不要成为过去。现在也有专职的文案，不断在修改帮助，加深了许多。测试人员现在比文案人员理解功能更细，更深入，经常提醒文案人员应该把某句话写进帮助中，否则容易被用户忽略，是个不小心就会绊倒的坑。</li></ol><h3 id="各司其职。对症下药"><a href="#各司其职。对症下药" class="headerlink" title="各司其职。对症下药"></a>各司其职。对症下药</h3><p>&emsp;<strong>遇到问题</strong>：在过去，服务部小姑娘老把电话转给开发人员，本来就几条枪，被客户电话吵的无法安心开发。而且客户发现开发人员接听电话处理问题更有效，所以很多客户都是直接给开发人员打电话，服务部成了虚架子，而开发人员的开发进度被拖累，叫苦不迭。</p><p>&emsp;<strong>解决措施</strong>：为了使测试人员更快速的了解客户应用操作方法，更细节的了解特个性的功能，我让测试人员也兼任研发部的技术支持。现在有了测试人员兼任技术支持，这下解放了开发人员。开发的质量和速度提高许多。</p><p>&emsp;<strong>引发问题</strong>：测试人员并没有做技术支持的经验，过了段时间就来和我诉苦，说现在服务部小姑娘啥也不干，都直接把电话转到他这里来，所以他现在已经无法测试了，成了专职的服务支持人员。如果再这样下去，软件质量无法保证，以后的技术支持压力更重，开发部就会成为开发+服务部门。</p><p>&emsp;<strong>解决措施（针对测试）</strong>：</p><ol><li>经常遇到的问题，就做成FAQ。下一次还有小姑娘问，直接让她看FAQ，拒不回答。</li><li>交给他们方法和思路，不替他们亲自做。亲自看着她，让她服务支持客户。一次不会，再继续这样做第二次，必须让她自己亲自会了。 </li><li>每个星期六定期培训，疑问解答。并且考试。如有讲过后考试还不会者，扣钱。</li></ol><p>&emsp;<strong>解决措施（针对服务部门）</strong>：你接待了多少客户问题，解决时间多长，多少个问题转给开发部技术支持了，这些问题的难度级别多高。根据这些指标来衡量服务部小姑娘们的技术解决问题能力。能力差的就辞退。</p><h3 id="统一战线，旗帜分明"><a href="#统一战线，旗帜分明" class="headerlink" title="统一战线，旗帜分明"></a>统一战线，旗帜分明</h3><p>&emsp;<strong>遇到问题</strong>：于有时候客户报告了某个BUG，程序员一看好改就直接改掉了，改完后就直接联系客户更新了，但是并没有更改软件版本号，也没有做新的打包。于是出现了同一个版本号软件功能表现却不同。而且，由于项目组多了，每个项目组组长都各有各的原因，有时候自己就打了一个包给了客户，随便定个版本号，起的都稀奇古怪，有的叫beta版，有的叫6.0.20050203。这种情形导致了测试人员做测试的时候，开发人员说改了，测试人员说没改。开发人员说已经没有问题了，测试人员说我这里还能重复出来。于是两个人一起查，耗费了两天时间，才查出来测试人员手里的和开发人员手里的不一致。</p><p>&emsp;<strong>解决措施</strong>：</p><ol><li><strong>开发人员绝对不能接触客户，不能接听客户电话，也不能解决客户问题，更不能给客户更新；</strong></li><li><strong>开发人员不能没有任务分配和设计文档就擅自修改软件，否则记过处分；</strong></li><li><strong>大家一致使用版本管理工具、BUG管理工具、需求管理工具、任务管理工具。用工具把项目经理、开发人员、测试人员、文案人员绑定在一起，按固化流程推进流转；</strong></li><li><strong>打包发布统一交给测试人员来做，测试人员来控制是否可以发布，发布的版本号的命名。质量达不到，有权不能发布。</strong></li></ol><h3 id="有的放矢，步步为营"><a href="#有的放矢，步步为营" class="headerlink" title="有的放矢，步步为营"></a>有的放矢，步步为营</h3><p>&emsp;&emsp;我们的测试已经能做边界测试、版本兼容性测试、系统兼容性测试、压力测试、安全测试、集成测试、破坏性测试。也已经在项目中应用全程测试，测试人员主要参与需求验证、设计验证、代码验证、文档验证、打包验证。</p><p>&emsp;&emsp;但是，我们现在还没有实现单元测试，开发人员就这些人，项目却多。而且测试人员没有编程能力。我们也没有做更多的回归测试，毕竟测试人员数量配备太少，而项目并行太多。</p><p>&emsp;&emsp;看机会吧。<strong>老板越从软件上赚钱，他才会越舍得投入软件。成本永远嫌多，利润永远嫌少。</strong></p><p>&emsp;&emsp;如果你是一名开发主管，你的老板还没有从你负责的软件中赚钱，而且是很快乐的很大规模的赚钱，而不是他靠他的人际关系和送礼吃饭支撑着，我想，他不会给你一毛钱的。你抱怨也没有用，因为你没有价值，所以投入也是没有意义。</p><p>&emsp;&emsp;先去证明你的价值吧。</p><h2 id="测试管理总结"><a href="#测试管理总结" class="headerlink" title="测试管理总结"></a><strong>测试管理总结</strong></h2><p>　　1、<strong>组间合作</strong></p><p>　　与开发、实施等组间良好的沟通与配合是非常重要的。这需要大家对目标认识的一致性及相互的理解与包容。实施人员直接面对的是用户，他们提出的任务不多，但都是比较重要的，需要直接交付于用户的。往往也是比较紧急的，所以沟通时必须确认好交付时间，以最高优先级来处理并以高质量来完成。</p><p>　　测试负责人不仅仅是关注测试那部分的工作，也需要关注整个项目的动态。实时了解项目的进度，了解每个阶段用户使用相对较多的模块，以了解本阶段的主要工作，把握本工作的重点，也能提前作好准备工作。同时发现项目在哪方面存在问题时，也可以用巧妙的方式来提醒，让他知道你是好意而不是对他工作的否定。如果经常能帮助到他们，我想对方也会欣然接受。</p><p>　　2、<strong>测试负责人的工作职责</strong></p><p>　　沟通协调工作也必须做好，当多个任务同时提交时，一定要问清楚紧急程度，系统是否要急于发布，文档是否急于交付。不急于发布的也可以让先发布好环境，因为往往发布系统都需要一定的时间，在其它系统没发布好前可以先进行测试。每项任务都需要了解范围，预计需要投入的工作及计划安排的人员。同时要做好突发性任务的准备。</p><p>　　测试负责人要有计划性和预见性，根据之前项目的经验判断出在某个阶段会有哪些工作要做，在任务不是很繁忙的时候要提前去做，这个是非常重要的。像文档能准备的尽早准备，交付前稍做检查更新就好了。在上线前一般系统会非常忙，根本没时间去修改文档等其它工作。</p><p>　　重要的任务需要亲自把关，或安排信得过的人去检查。对于客户交付的文档对于内容和格式都务必要正确。像用户手册等是用户需要使用的，所以内容的正确性与现有系统的一致性就比较重要。对于测试用例、缺陷记录、出厂测试报告等文档的内容用户不是太关心的，格式则比内容更重要。对于发布前的那次测试一定要进行整体测试。不要相信因开发说哪些地方没改不会存在问题的说法，对于修改的模块或功能，与之相关的功能进行重点测试，未涉及到修改的模块也要把每个功能简单测试一下。开发修改缺陷时经常会把关联的地方没关注到，还有经常作了一些小的改动没有提交测试，时间久了就忘了哪些地方作了修改了。</p><p>　　把合适的人放在合适的位置。团队的每一位成员特长不可能都会一样，每个方面不可能同样的优秀。有些可能是技术方面强一些，有些在业务方面要强一些，有的可能在管理方面要强一些；有的性格开朗善于沟通，有的不善言辞但敏于思考，能耐得住寂寞。前者可以多做些沟通及工作协调的事，后者可以多安排些技术研究或检查文档等需要细心一点的工作。当然也要让组员明白，不是自己想要做什么就能做什么，一切必须以当前的任务情况来做安排，在条件许可的情况下会优先考虑。自己可以利用业余的时间去学习，充实自己，一旦机会来临才能去胜任。</p><p>　　要善于观察组内成员的工作状态，及时发现哪些人状态不好，及时沟通及协助解决。</p><p>　　要定期向上级领导汇报工作情况，让领导了解组内的工作情况，同时当需要申请资源时也会容易些。同时也需要让组员了解一下自己的工作情况，他们可能只了解你参与测试的这部分工作，其它工作并不了解。不要让组员认为什么事都让下面人做，自己却没做多少事。</p><p>　　3、<strong>组内管理</strong></p><p>　　一个好的团队必须有良好的团队氛围，必须要有共同的目标，这点很重要。如果经常意见不一致在喋喋不休地争论，这样什么事情都不可能做好。当然这并不代表大家不能发表自己的意见。讨论问题时大家都是平等的，要尽情开放的地讨论，把大家的建议都发表出来，最后采取的方案也要取得大多数人的认同，但一旦确定一个执行方案后大家都要按照来执行。</p><p>　　要合理安排资源，以免部分人员工作强度很高，部分人员又会有空闲时间。这样也会引起忙的人心里不平衡。这个是有点难度，但需要尽可能地安排好。每个项目的测试人员要多考虑一两个备份人员，具体人数视项目情况。每个阶段每个项目的工作量都不一样，安排时根据每个项目进度情况来合理备配人员，尽量做到大家的工作量不会出现太大的差异。当任务少时，可以多安排一些研究性的工作为一个阶段的工作做准备，多安排业务交流，文档走查的工作等，也可以对前段时间的工作总结。像年初年末，工作状态可能也不会很好，此时就可以做一下总结，计划一下来年的工作。</p><p>　　每个小组的测试项目越来越多，可以采用分级管理模式，每个项目设立一位负责人，既提高了大家的责任感，提高了自己的管理能力。同时也让大家从工作中学会了换位思考，体会到做组员和负责人的立场与想法，也分担了组长的工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章依据&lt;a href=&quot;http://www.51testing.com/html/77/n-240077-3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《我是怎样做测试管理的？》&lt;/a&gt;，&lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="调优" scheme="https://sophoraflower.github.io/EverQuest/categories/%E8%B0%83%E4%BC%98/"/>
    
      <category term="软件测试" scheme="https://sophoraflower.github.io/EverQuest/categories/%E8%B0%83%E4%BC%98/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试管理" scheme="https://sophoraflower.github.io/EverQuest/tags/%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>上海-西塘-绍兴</title>
    <link href="https://sophoraflower.github.io/EverQuest/2016/0808/%E4%B8%8A%E6%B5%B7-%E8%A5%BF%E5%A1%98-%E7%BB%8D%E5%85%B4/"/>
    <id>https://sophoraflower.github.io/EverQuest/2016/0808/上海-西塘-绍兴/</id>
    <published>2016-08-07T16:00:00.000Z</published>
    <updated>2018-01-20T23:49:26.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="上海"><a href="#上海" class="headerlink" title="上海(^)"></a>上海(^)</h3><h3 id="西塘"><a href="#西塘" class="headerlink" title="西塘"></a>西塘</h3><div class="justified-gallery"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/jkAff6AbEc.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/eI3F74dmG9.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/dLbc7LI8jI.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/big0hlGdmd.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/ba43m7k0IL.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/K7hE601JCB.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/J0E9Icld1c.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/I283mlbBcI.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/Hl8dbLL7c2.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/HDH1E2fajG.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/DiheGlJjhl.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/A87bf6AdFH.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/9aF9djEkIF.JPG" alt="西塘街拍"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/6hffIE16ja.JPG" alt="社戏"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/6Ge6bEHH5j.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/3dmlk3c9BJ.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/3EGfEa6e9a.JPG" alt="小桥流水"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/2Djf8k6f8g.JPG" alt="红灯绿水"><br></div><h3 id="绍兴"><a href="#绍兴" class="headerlink" title="绍兴"></a>绍兴</h3><div class="justified-gallery"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/e0lifhgh9H.JPG" alt="鲁迅故居"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/bdFdFBlAA6.JPG" alt="鲁迅故居"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/b1lBa0L5dI.JPG" alt="鲁迅故居"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/Lmg687aECe.JPG" alt="鲁迅故居"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/Fl7b5m8jLG.JPG" alt="鲁迅故居"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/F8Ae1DAdgh.JPG" alt="鲁迅故居"><br><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/CCm9maI3EJ.JPG" alt="鲁迅故居"><br></div><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/AhB4hdiC7l.JPG" alt="绍兴街拍"></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/4hbaKA69j0.JPG" alt="喵喵"></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/3Ba2EJl1D9.JPG" alt="小桥流水"></p><p><img src="http://p2s7rr94e.bkt.clouddn.com/blog/180120/204L0a60jH.JPG" alt="咸亨酒店"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;上海&quot;&gt;&lt;a href=&quot;#上海&quot; class=&quot;headerlink&quot; title=&quot;上海(^)&quot;&gt;&lt;/a&gt;上海(^)&lt;/h3&gt;&lt;h3 id=&quot;西塘&quot;&gt;&lt;a href=&quot;#西塘&quot; class=&quot;headerlink&quot; title=&quot;西塘&quot;&gt;&lt;/a&gt;西塘&lt;/h3&gt;
      
    
    </summary>
    
      <category term="LifeStyle" scheme="https://sophoraflower.github.io/EverQuest/categories/LifeStyle/"/>
    
      <category term="摄影" scheme="https://sophoraflower.github.io/EverQuest/categories/LifeStyle/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="摄影" scheme="https://sophoraflower.github.io/EverQuest/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>《页面架构》课堂交流问题汇总</title>
    <link href="https://sophoraflower.github.io/EverQuest/2016/0628/%E3%80%8A%E9%A1%B5%E9%9D%A2%E6%9E%B6%E6%9E%84%E3%80%8B%E8%AF%BE%E5%A0%82%E4%BA%A4%E6%B5%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://sophoraflower.github.io/EverQuest/2016/0628/《页面架构》课堂交流问题汇总/</id>
    <published>2016-06-28T10:21:00.000Z</published>
    <updated>2018-01-21T23:16:38.967Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本课程为网易云课堂 - - 前端开发工程师 - - <a href="http://mooc.study.163.com/learn/NEU-1000054001?tid=2001219009#/learn/content" target="_blank" rel="noopener">《页面架构</a>》学习总结</p></blockquote><h3 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h3><h4 id="问题一：水平列表的底部对齐"><a href="#问题一：水平列表的底部对齐" class="headerlink" title="问题一：水平列表的底部对齐"></a>问题一：水平列表的底部对齐</h4><p>如图所示，一个水平排列的列表，每项高度都未知，但要求底部对齐，有哪些方法可以解决呢？</p><p>&emsp;&emsp;&emsp;&emsp;<img src="http://img.blog.csdn.net/20160628163033577" alt="这里写图片描述"></p><p><strong>解决方案：</strong></p><ul><li>方法一：子元素设置：display：inline-block + vertical-align:bottom</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>水平列表的底部对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:800px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#CCC</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">vertical-align</span><span class="selector-pseudo">:bottom</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_b</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:75</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_c</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_d</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:25</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_a"</span>&gt;</span>我是最左边的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_b"</span>&gt;</span>我是老二，嘿嘿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_c"</span>&gt;</span>我是倒数第二！能看到我吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_d"</span>&gt;</span>我是倒数第一吆~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方法二：position:relative + 子元素：position:absolute + bottom：0</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>水平列表的底部对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:800px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#CCC</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;    </span></span><br><span class="line"><span class="undefined">        &#125;                   </span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:15px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_b</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:180px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:75</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_c</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:345px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_d</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:510px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:25</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_a"</span>&gt;</span>我是最左边的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_b"</span>&gt;</span>我是老二，嘿嘿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_c"</span>&gt;</span>我是倒数第二！能看到我吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_d"</span>&gt;</span>我是倒数第一吆~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方法三：父元素：dispaly:flex + align-items:flex-end</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>水平列表的底部对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:800px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#CCC</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">align-items</span><span class="selector-pseudo">:flex-end</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-left</span><span class="selector-pseudo">:15px</span>;</span></span><br><span class="line"><span class="undefined">        &#125;                   </span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_b</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:75</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_c</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="css">               <span class="selector-class">.child_d</span>&#123;</span></span><br><span class="line"><span class="css">                      <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">                      <span class="selector-tag">height</span><span class="selector-pseudo">:25</span>%;</span></span><br><span class="line"><span class="css">                      <span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">               &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_a"</span>&gt;</span>我是最左边的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_b"</span>&gt;</span>我是老二，嘿嘿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_c"</span>&gt;</span>我是倒数第二！能看到我吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_d"</span>&gt;</span>我是倒数第一吆~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方法四：弹性盒模型</li></ul><p>&emsp;&emsp;<strong>相关重点文章推荐：</strong></p><p>&emsp;&emsp;<a href="http://blog.csdn.net/lovejulyer/article/details/51231951" target="_blank" rel="noopener">《CSS3实战》笔记–弹性盒模型（一）</a>   </p><p>&emsp;&emsp;<a href="http://blog.csdn.net/lovejulyer/article/details/51232442" target="_blank" rel="noopener">《CSS3实战》笔记–弹性盒模型（二）</a>   </p><p> &emsp;&emsp;<a href="http://blog.csdn.net/lovejulyer/article/details/51234774" target="_blank" rel="noopener">《CSS3实战》笔记–弹性盒模型（三）</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>水平列表的底部对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:800px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#CCC</span>;</span></span><br><span class="line"><span class="undefined">            display:box;   //  设置为盒子显示</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:-moz-box</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:-webkit-box</span>;</span></span><br><span class="line"><span class="undefined">            orient:horizontal;  //  定义父元素内子元素的流动</span></span><br><span class="line"><span class="css">            <span class="selector-tag">-mozbox-orient</span><span class="selector-pseudo">:horizontal</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">-webkit-orient</span><span class="selector-pseudo">:horizontal</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">box-align</span><span class="selector-pseudo">:end</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">-moz-box-align</span><span class="selector-pseudo">:end</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">-webkit-box-align</span><span class="selector-pseudo">:end</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="undefined">             </span></span><br><span class="line"><span class="undefined">        &#125;                   </span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_b</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:350px</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_c</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:250px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.child_d</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_a"</span>&gt;</span>我是最左边的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_b"</span>&gt;</span>我是老二，嘿嘿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_c"</span>&gt;</span>我是倒数第二！能看到我吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child_d"</span>&gt;</span>我是倒数第一吆~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="问题二：实现一个幻灯布局"><a href="#问题二：实现一个幻灯布局" class="headerlink" title="问题二：实现一个幻灯布局"></a>问题二：实现一个幻灯布局</h4><p>&emsp;&emsp;一个幻灯片效果如图：</p><p>&emsp;&emsp;&emsp;&emsp;<img src="http://img.blog.csdn.net/20160628164049067" alt="这里写图片描述"></p><p>&emsp;&emsp;已知结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图片省略 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以下是指示器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pointer"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>要求如下：</strong>幻灯（slide）宽高未知，指示器（pointer）在底部且水平居中，距离底部10px，指示器中的圆直径为10px，个数未知，背景为黑色，间距为5px，请完成CSS。</p><p>&emsp;&emsp;<strong>解答：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>幻灯图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.slide</span>&#123;            </span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>:<span class="selector-id">#9dc3e6</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.pointer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">transform</span><span class="selector-pseudo">:translate(-50</span>%);</span></span><br><span class="line"><span class="css">            <span class="selector-tag">bottom</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.pointer</span> <span class="selector-tag">i</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-right</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.pointer</span> <span class="selector-tag">i</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片省略 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下是指示器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pointer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h3><h4 id="问题一：一个全等四宫格的实现"><a href="#问题一：一个全等四宫格的实现" class="headerlink" title="问题一：一个全等四宫格的实现"></a>问题一：一个全等四宫格的实现</h4><p>&emsp;&emsp;一个未知宽高的容器，要被均分为四个相同大小格子（即四个容器），且格子间有10px间距（即十字型空隙），有哪些方法可以解决呢？</p><p>&emsp;&emsp;&emsp;&emsp;<img src="http://img.blog.csdn.net/20160628171625106" alt="这里写图片描述"></p><p>&emsp;&emsp;<strong>方法一：</strong>（效果不好，Firefox浏览器效果基本可以，需要css微调）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>一个全等四宫格的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">          *&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">          <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#CCC</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">width</span><span class="selector-pseudo">:420px</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">height</span><span class="selector-pseudo">:420px</span>;</span></span><br><span class="line"><span class="undefined">          &#125; </span></span><br><span class="line"><span class="css">          <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">background</span>:<span class="selector-id">#009999</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>;            </span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="css">          <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 17<span class="selector-tag">px</span> 0 0;</span></span><br><span class="line"><span class="undefined">          &#125;    </span></span><br><span class="line"><span class="css">          <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(even)</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 0 0 <span class="selector-tag">-2px</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="css">          <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">margin</span><span class="selector-pseudo">:17px</span> 17<span class="selector-tag">px</span> 0 0;</span></span><br><span class="line"><span class="undefined">          &#125;                        </span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>方法二： （display：flex）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>一个全等四宫格的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">           <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">width</span><span class="selector-pseudo">:410px</span>;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">height</span><span class="selector-pseudo">:410px</span>;               </span></span><br><span class="line"><span class="css">               <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#CCC</span>;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">flex-direction</span><span class="selector-pseudo">:row</span>;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">flex-wrap</span><span class="selector-pseudo">:wrap</span>;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">justify-content</span><span class="selector-pseudo">:space-between</span>;</span></span><br><span class="line"><span class="undefined">           &#125; </span></span><br><span class="line"><span class="css">           <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">background</span>:<span class="selector-id">#009999</span>;                    </span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="css">           <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">align-self</span><span class="selector-pseudo">:flex-end</span>;</span></span><br><span class="line"><span class="undefined">           &#125;</span></span><br><span class="line"><span class="css">           <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="css">               <span class="selector-tag">align-self</span><span class="selector-pseudo">:flex-end</span>;</span></span><br><span class="line"><span class="undefined">           &#125;            </span></span><br><span class="line"><span class="undefined">       </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span>            </span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>方法三：box-sizing:border-box; background-clip:content-box;</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>一个全等四宫格的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;<span class="attribute">height</span>:<span class="number">100%</span>;&#125;            </span></span><br><span class="line"><span class="css">            <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">height</span><span class="selector-pseudo">:50</span>%;               </span></span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#CCC</span>;                </span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>:<span class="selector-id">#009999</span>;    </span></span><br><span class="line"><span class="css">                <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">height</span><span class="selector-pseudo">:50</span>%;            </span></span><br><span class="line"><span class="css">                <span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-clip</span><span class="selector-pseudo">:content-box</span>;                </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">padding-right</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">padding-bottom</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="undefined">            &#125;    </span></span><br><span class="line"><span class="css">            <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">padding-bottom</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">padding-right</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="undefined">            &#125;                             </span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span>            </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全屏布局"><a href="#全屏布局" class="headerlink" title="全屏布局"></a>全屏布局</h3><h4 id="问题：已知HTML结构和效果图如下："><a href="#问题：已知HTML结构和效果图如下：" class="headerlink" title="问题：已知HTML结构和效果图如下："></a>问题：已知HTML结构和效果图如下：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;假设以上父元素称为A，子元素称为B</p><p>&emsp;&emsp;&emsp;&emsp;<img src="http://img.blog.csdn.net/20160628172854070" alt="这里写图片描述"></p><p>&emsp;&emsp;请写出CSS以实现以下弹窗需求：弹窗（B）固定在浏览器窗口中间，弹窗背景色为白色，弹窗宽高由其内容决定，弹窗四周为黑色半透明（0.5透明度）遮罩。</p><p>&emsp;&emsp;HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 测试弹窗高度由内容决定</span></span><br><span class="line"><span class="comment">    &lt;p&gt;Hello World&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;Hello World&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=50);</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><h4 id="高清屏的背景图片适配"><a href="#高清屏的背景图片适配" class="headerlink" title="高清屏的背景图片适配"></a>高清屏的背景图片适配</h4><p>&emsp;&emsp;当我们把一个图标做成CSS中的背景图，在视网膜屏上预览时会发现图标是模糊的，所以我们会同时准备一个2倍大小的图标给高清屏，那么问题来了，怎么实现在普通屏下是普通背景图，而在高清屏下是用的高清图呢？</p><p>&emsp;&emsp;<strong>解答：</strong></p><p><strong>方法一：</strong><code>&lt;img&gt;</code> <strong>标签引用的图片</strong></p><p>&emsp;&emsp;通过js做自动适配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"photo"</span> src=<span class="string">"./photo.jpg"</span> style=<span class="string">"width:300px;height:200px;"</span> /&gt;</span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> images = $(<span class="string">"img.photo"</span>);</span><br><span class="line">        images.each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> x1 = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>);</span><br><span class="line">            <span class="keyword">var</span> x2 = x1.replace(<span class="regexp">/(.*)(\.\w+)/</span>, <span class="string">"$1@2x$2"</span>);</span><br><span class="line">            $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, x2);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<a href="http://imulus.github.io/retinajs/" target="_blank" rel="noopener">Retina.js</a> 提供了更加完善的解决方案，自动匹配屏幕分辨率的同时，还可以检测服务器上是否存有当前图片的 @2X 版本，以决定是否替换。</p><p>&emsp;&emsp;<strong>优点：</strong></p><pre><code>操作简单普通屏幕下不会加载 @2X 的大尺寸图片，节约带宽</code></pre><p>&emsp;&emsp;<strong>缺点：</strong></p><pre><code>Retina 屏幕下，标准图片和高清的图片都会被加载图片在显示过程中会被重绘有些老版本浏览器下存在兼容问题（一些老版本浏览器如 IE6、7 会显示得非常失真）</code></pre><p>&emsp;&emsp;<strong>方法二：CSS的media标签</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>),</span><br><span class="line">       only screen and (min--moz-device-pixel-ratio: <span class="number">1.5</span>), /* 注意这里的写法比较特殊 */</span><br><span class="line">       only screen and (-o-min-device-pixel-ratio: <span class="number">3</span>/<span class="number">2</span>),</span><br><span class="line">       only screen and (min-device-pixel-ratio: <span class="number">1.5</span>) &#123;</span><br><span class="line">    <span class="selector-id">#logo</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(./logo@2x.png);</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">100px</span> auto;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;优点：</p><pre><code>只会加载匹配当前设备的最适图片跨浏览器兼容</code></pre><p>&emsp;&emsp;缺点：</p><pre><code>如果背景图片很多的话，需要编写非常冗长的代码</code></pre><p>&emsp;&emsp;<strong>方法三：css的image-set方法</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: -webkit-image-set(url(./logo.png) 1x, url(./logo@2x.png) 2x);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong>优点：</strong>css中编写，图片集中，代码量少<br>&emsp;&emsp;<strong>缺点：</strong>存在兼容性问题，仅支持background-image属性，而不能使用在“<img>”标签中，是css4的草案。</p><h4 id="问题：完成响应式布局的实现"><a href="#问题：完成响应式布局的实现" class="headerlink" title="问题：完成响应式布局的实现"></a>问题：完成响应式布局的实现</h4><p>&emsp;&emsp;已知一个自适应布局的HTML结构如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;请完成以下响应式要求：</p><ul><li>默认情况，PC电脑（假设视窗都大于等于1000px）访问：两列布局，.parent宽960px且水平居中，左列.side宽300px，右列.main宽650px，列间距10px。</li></ul><p><img src="http://img.blog.csdn.net/20160628180301100" alt="这里写图片描述"></p><ul><li>当用平板（假设视窗都大于400px且小于1000px）访问：两列布局，.parent宽度撑满，右列.main自适应剩余宽度，两列间距仍旧为10px。</li></ul><p><img src="http://img.blog.csdn.net/20160628180318866" alt="这里写图片描述"></p><ul><li>当用手机（假设视窗都小于等于400px）访问：上下两行布局，.parent宽度撑满，.side和.main宽度也撑满，行间距为10px。</li></ul><p><img src="http://img.blog.csdn.net/20160628180337256" alt="这里写图片描述"></p><p>&emsp;&emsp;<strong>解答</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>完成响应式布局的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html, body &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            background-color: lightgray;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 默认情况：两列布局，.parent宽960px且水平居中，左列.side宽300px，右列.main宽650px，列间距10px*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 960px;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.side</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            background-color: lightblue;</span></span><br><span class="line"><span class="undefined">            width: 300px;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">            width: 650px;</span></span><br><span class="line"><span class="undefined">            margin-left: 310px;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 当用平板（假设视窗都大于400px且小于1000px）访问：两列布局，.parent宽度撑满，右列.main自适应剩余宽度，两列间距仍旧为10px。 */</span></span></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> screen and (min-width: <span class="number">400px</span>) and (max-width: <span class="number">1000px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">                width: 100%;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="undefined">                width: auto;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 当用手机（假设视窗都小于等于400px）访问：上下两行布局，.parent宽度撑满，.side和.main宽度也撑满，行间距为10px。 */</span></span></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> screen and (max-width: <span class="number">400px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">                width: 100%;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.side</span> &#123;</span></span><br><span class="line"><span class="undefined">                width: 100%;</span></span><br><span class="line"><span class="undefined">                float: none;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="undefined">                width: 100%;</span></span><br><span class="line"><span class="undefined">                margin-left: 0;</span></span><br><span class="line"><span class="undefined">                margin-top: 10px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h3><h4 id="问题：页面优化的方法"><a href="#问题：页面优化的方法" class="headerlink" title="问题：页面优化的方法"></a>问题：页面优化的方法</h4><ul><li><p>减少请求。</p></li><li><p>减少文件大小。</p></li><li><p>提升页面性能。</p></li><li><p>提升可读性，维护性。</p></li><li><p><strong>减少请求</strong></p><ul><li>图片合并（62%的内容是图片）</li></ul><p>&emsp;  &emsp; 1）选择合适的图片格式（PNG，JPG）。</p><p>&emsp; &emsp; 2）压缩图片（imageOptim,imageAlpha,JPEGmini）</p><ul><li>CSS合并</li></ul><p>&emsp; &emsp; 1）多个CSS文件合并为一个。</p><p>&emsp; &emsp; 2）少量CSS样式内联</p><p>&emsp; &emsp; 3）避免使用import（同步的单线程请求）的方式引入CSS文件。</p><p>&emsp; &emsp; 4）值缩写。（margin,padding,border,border-radius,font,background）</p><p>&emsp; &emsp; 5）省略值为0的单位。（0px,0%,0.5）</p><p>&emsp; &emsp; 6）颜色值最短表示（red,rgb(255,255,0),rgba,#333）</p><p> &emsp; &emsp;7）选择器合并(.m-logo,.m-var)</p><p>&emsp; &emsp; 8）文件压缩（上线前，去空格） </p></li><li><p><strong>页面性能优化</strong></p><ul><li><p>加载顺序（CSS放上面，JS放下面）</p></li><li><p>减少标签数量</p></li><li><p>选择器长度</p></li><li><p>耗性能属性（expression）</p></li><li><p>图片设置宽高</p></li><li><p>所有表现用CSS实现</p></li></ul></li><li><p><strong>可读性，可维护性</strong></p><ul><li><p>规范</p></li><li><p>语义化</p></li><li><p>尽量避免HACK</p></li><li><p>模块化</p></li><li><p>注释</p></li></ul></li></ul><h4 id="问题：代码优化"><a href="#问题：代码优化" class="headerlink" title="问题：代码优化"></a>问题：代码优化</h4><p>&emsp;&emsp;请对以下CSS进行优化:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">font-weight</span>: bold;&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;<span class="attribute">font-weight</span>: bold;&#125;</span><br><span class="line"><span class="selector-tag">h3</span>&#123;<span class="attribute">font-weight</span>: bold;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.g-bd</span>&#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#bbff22</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-tab</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(255,0,0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-tab</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, simsun;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-side</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(bg.png);</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  &emsp;&emsp;<strong>解答：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>&#123;<span class="attribute">font-weight</span>: bold;&#125;</span><br><span class="line"><span class="selector-tag">h3</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.g-bd</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;<span class="attribute">border-color</span>: <span class="number">#000</span> <span class="number">#f00</span> <span class="number">#f00</span> <span class="number">#000</span>;<span class="attribute">color</span>: <span class="number">#bf2</span>;&#125;</span><br><span class="line"><span class="selector-class">.m-tab</span>&#123;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span>;<span class="attribute">color</span>: red;&#125;</span><br><span class="line"><span class="selector-class">.m-tab</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;<span class="attribute">display</span>: block;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;<span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">1.5</span> <span class="string">"Microsoft YaHei"</span>, simsun;&#125;</span><br><span class="line"><span class="selector-class">.m-side</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">background</span>: <span class="number">#ccc</span> <span class="built_in">url</span>(bg.png) repeat-y;&#125;</span><br></pre></td></tr></table></figure><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>&emsp;&emsp;####问题：制订一份CSS规范</p><p>&emsp;&emsp;<strong>解答：</strong></p><p>一、文件规范</p><pre><code>1.文件按照通用类和业务类进行归档2.文件使用外联引入，其他一些样式使用内联引入3.文件名采用小写字母，可适当加中划线，然后使用数字来表示版本4.编码采用utf-8格式</code></pre><p>二、注释规范</p><pre><code>1.块状注释：统一缩进，在被注释对象之上2.单行注释：文字两端空格，在被注释对象之上3.行内注释：文字两端空格，分号之后</code></pre><p>三、命名规范</p><pre><code>1.采用分类命名，布局类以g-开头，实际内容以m-开头2.命名具有可读性且长度适中，适当缩写3.语义化命名方式</code></pre><p>四、书写规范</p><pre><code>1.多行书写，便于阅读2.默认缩进为两个空格3.css规则内一个空格4.需要保留最后一个属性值的分号5.属性书写顺序按照：位置属性——自身盒模型相关属性——显示属性 的顺序来书写6.尽量少使用Hack，ie6采用_开头，ie67采用*开头，先写ie67的，再写ie6的7.color命名采用十六进制，且尽量缩写8.url()文件格式不加引号</code></pre><p>五、其他规范</p><pre><code>1.&lt;!DOCTYPE html&gt; 顶格开始文档声明2.闭合标签均闭合，自闭合标签也需要闭合3.属性采用单引号，readonly、checked等属性可以直接写，不用=&quot;&quot;4.采用缩进体现层级，正确嵌套，但不宜太深，影响性能5.注释：&lt;!-- A --&gt; xxx &lt;!-- /A --&gt;6.标签属性均小写7.文件语义化命名，且不能过长8.保留源文件9.使用sprite技术来合并图片10.图片按照模块、业务、页面来划分</code></pre><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="问题：页面模块化优点"><a href="#问题：页面模块化优点" class="headerlink" title="问题：页面模块化优点"></a>问题：页面模块化优点</h4><p>&emsp;&emsp;解答：</p><pre><code>利于多人协同开发 便于扩展和重用 可读性，可维护性好灵活，快速，高效.不会出现样式污染</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本课程为网易云课堂 - - 前端开发工程师 - - &lt;a href=&quot;http://mooc.study.163.com/learn/NEU-1000054001?tid=2001219009#/learn/content&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="Web前端" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Web综合" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/Web%E7%BB%BC%E5%90%88/"/>
    
    
  </entry>
  
  <entry>
    <title>《DOM编程艺术》课堂交流问题汇总之进阶篇</title>
    <link href="https://sophoraflower.github.io/EverQuest/2016/0608/%E3%80%8ADOM%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E3%80%8B%E8%AF%BE%E5%A0%82%E4%BA%A4%E6%B5%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>https://sophoraflower.github.io/EverQuest/2016/0608/《DOM编程艺术》课堂交流问题汇总之进阶篇/</id>
    <published>2016-06-08T06:26:00.000Z</published>
    <updated>2018-01-21T23:12:17.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本课程为网易云课堂 - - 前端开发工程师 - - <a href="http://mooc.study.163.com/course/NEU-1000054004?tid=2001219008#/info" target="_blank" rel="noopener">《DOM编程艺术》</a>学习总结</p></blockquote><h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><p><strong>相关笔记推荐</strong>：<a href="http://wiki.jikexueyuan.com/project/fend_note/chapter3/04_style_manipulation.html" target="_blank" rel="noopener">前端微笔记-样式操作</a></p><h4 id="问题一：如何实现浏览器兼容版的window-getComputedStyle"><a href="#问题一：如何实现浏览器兼容版的window-getComputedStyle" class="headerlink" title="问题一：如何实现浏览器兼容版的window.getComputedStyle"></a>问题一：如何实现浏览器兼容版的window.getComputedStyle</h4><p>　　window.getComputedStyle能够获取元素的实际样式，但是低版本的ie8及以下不支持，如何在低版本的ie上兼容类似的功能。</p><p><strong>解答：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComputedStyle</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(element);        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> element.currentStyle;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="问题二：实现getStyle函数"><a href="#问题二：实现getStyle函数" class="headerlink" title="问题二：实现getStyle函数"></a>问题二：实现getStyle函数</h3><p>　　getStyle函数用于获取元素的实际样式，语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cssPropertyValue = getStyle (element, cssPropertyName)；</span><br></pre></td></tr></table></figure><p>　　使用示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getStyle(element, <span class="string">"color"</span>) 返回element元素的显示颜色，如：<span class="string">"rgb(0, 0, 0)"</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getStyle(element, <span class="string">"line-height"</span>) 返回element元素的实际行高，如：<span class="string">"30px"</span></span><br></pre></td></tr></table></figure><p>　　请实现getStyle函数，要求浏览器兼容。</p><p><strong>解答：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element,cssPropertyName</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">           <span class="keyword">return</span> element.currentStyle[cssPropertyName];</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> getComputedStyle(element)[cssPropertyName];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h3><p><strong>相关笔记推荐：</strong><a href="http://wiki.jikexueyuan.com/project/fend_note/chapter3/09_network.html" target="_blank" rel="noopener">前端微笔记-《DOM编程艺术》-数据通信</a></p><p>####问题一：Ajax请求GET方法的封装</p><p>　　方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get(url, options, callback)</span><br></pre></td></tr></table></figure><p>　　参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url    &#123;String&#125;    请求资源的url</span><br><span class="line">options    &#123;Object&#125;    请求的查询参数</span><br><span class="line">callback    &#123;Function&#125;    请求的回调函数，接收XMLHttpRequest对象的responseText属性作为参数</span><br></pre></td></tr></table></figure><p>　　返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br></pre></td></tr></table></figure><p>　　举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get(‘/information’, &#123;<span class="attr">name</span>: ‘netease’, <span class="attr">age</span>: <span class="number">18</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>　　描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法get(url, options, callback) 是对Ajax请求GET方法的封装。请写出get方法的实现代码。</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, options, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();     <span class="comment">//创建XHR对象</span></span><br><span class="line">        <span class="comment">// 处理返回数据</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;      <span class="comment">//浏览器结束请求</span></span><br><span class="line">                <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;<span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;  <span class="comment">//status为200-300表示success，304为读取缓存</span></span><br><span class="line">                    callback(xhr.responseText);     <span class="comment">//执行返回的html、xml</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(<span class="string">'Requeset was unsuccessful: '</span> + xhr.status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 请求参数序列化，把对象转换为例如'name1=value1&amp;name2=value2'的格式</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!data) &#123;<span class="keyword">return</span> <span class="string">''</span>;&#125;</span><br><span class="line">            <span class="keyword">var</span> pairs = [];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> data)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!data.hasOwnProperty(name)) &#123;<span class="keyword">continue</span>;&#125;     <span class="comment">//判断对象自身是否有name属性</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> data[name] === <span class="string">'function'</span>) &#123;<span class="keyword">continue</span>;&#125;   <span class="comment">//如果对象的值是一个函数，忽略</span></span><br><span class="line">                <span class="keyword">var</span> value = data[name].toString();</span><br><span class="line">                name = <span class="built_in">encodeURIComponent</span>(name);    <span class="comment">//把字符串作为URI 组件进行编码。将转义用于分隔 URI 各个部分的标点符号</span></span><br><span class="line">                value = <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">                pairs.push(name + <span class="string">'='</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pairs.join(<span class="string">'&amp;'</span>);</span><br><span class="line">        &#125;    </span><br><span class="line">        xhr.open(<span class="string">'get'</span>,URL,<span class="literal">true</span>);   <span class="comment">//url+查询参数序列号结果</span></span><br><span class="line">        <span class="comment">//放在open后执行，表示文本内容的编码方式是URL编码，即除了标准字符外，每字节以双字节16进制前加个“%”表示</span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">        xhr.send(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// test</span></span><br><span class="line">        get(<span class="string">'/information'</span>, &#123;<span class="attr">name</span>: <span class="string">'netease'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h4 id="问题二：Ajax请求POST方法的封装"><a href="#问题二：Ajax请求POST方法的封装" class="headerlink" title="问题二：Ajax请求POST方法的封装"></a>问题二：Ajax请求POST方法的封装</h4><p>　　post函数是对Ajax的POST请求的封装，语法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post(url, options, callback)</span><br></pre></td></tr></table></figure></p><p>　　没有返回值，参数说明如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url：请求资源的url，<span class="built_in">String</span>类型</span><br><span class="line">options：请求的查询参数，<span class="built_in">Object</span>类型</span><br><span class="line">callback：回调函数，接收XMLHttpRequest对象的responseText属性作为参数，<span class="built_in">Function</span>类型</span><br></pre></td></tr></table></figure></p><p>　　使用示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post(<span class="string">'/addUser'</span>, &#123;<span class="attr">name</span>: <span class="string">'jerry'</span>, <span class="attr">age</span>: <span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 处理返回数据</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>　　请写出post函数的实现代码，要求浏览器兼容。</p><p><strong>解答：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PostAjax</span>(<span class="params">url, options, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>)||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">                callback(xhr.responseText,options);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                alert(<span class="string">"Request was unsuccessful:"</span>+xhr.status);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(<span class="string">"post"</span>,url+<span class="string">"?"</span>+serialize(options),<span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> url=<span class="string">"http://study.163.com/webDev/hotcouresByCategory.htm"</span>;</span><br><span class="line">  </span><br><span class="line">PostAjax(url,&#123;<span class="string">"id"</span>:<span class="number">1002963026</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data,options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ObjData=<span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> ObjData)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ObjData[key][<span class="string">"id"</span>]==options.id)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(ObjData[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!data) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> pairs=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!data.hasOwnProperty(name)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> data[name]===<span class="string">"function"</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">var</span> value=data[name].toString();</span><br><span class="line">        name=<span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">        value=<span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">        pairs.push(name+<span class="string">"="</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pairs.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><h4 id="问题：cookie的作用和弊端"><a href="#问题：cookie的作用和弊端" class="headerlink" title="问题：cookie的作用和弊端"></a>问题：cookie的作用和弊端</h4><p>　　用cookie作为浏览器端的存储有哪些作用？有哪些弊端，是否有替代的解决办法？</p><p>解答：</p><p>作用：</p><ul><li><p>可以在客户端上保存用户数据，起到简单的缓存和用户身份识别等作用。</p></li><li><p>保存用户的登陆状态，用户进行登陆，成功登陆后，服务器生成特定的cookie返回给客户端，客户端下次访问该域名下的任何页面，将该cookie的信息发送给服务器，服务器经过检验，来判断用户是否登陆。</p></li><li><p>记录用户的行为。</p></li></ul><p>弊端：</p><ul><li><p>增加流量消耗，因为每次请求都会带上cookie信息</p></li><li><p>安全性隐患，cookie使用明文传输</p></li><li><p>大小限制：最大容量在4KB左右</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本课程为网易云课堂 - - 前端开发工程师 - - &lt;a href=&quot;http://mooc.study.163.com/course/NEU-1000054004?tid=2001219008#/info&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="Web前端" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://sophoraflower.github.io/EverQuest/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>《产品前端架构》课堂交流问题汇总</title>
    <link href="https://sophoraflower.github.io/EverQuest/2016/0605/%E3%80%8A%E4%BA%A7%E5%93%81%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E3%80%8B%E8%AF%BE%E5%A0%82%E4%BA%A4%E6%B5%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://sophoraflower.github.io/EverQuest/2016/0605/《产品前端架构》课堂交流问题汇总/</id>
    <published>2016-06-05T04:36:00.000Z</published>
    <updated>2018-01-20T23:48:31.756Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本课程为网易云课堂 - - 前端开发工程师 - - <a href="http://mooc.study.163.com/course/NEU-1000054002?tid=2001219010#/info" target="_blank" rel="noopener">《产品前端架构》</a>学习总结</p></blockquote><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><h4 id="问题一：分布式版本控制-DVCS-对比集中式版本控制系统-CVCS"><a href="#问题一：分布式版本控制-DVCS-对比集中式版本控制系统-CVCS" class="headerlink" title="问题一：分布式版本控制(DVCS) 对比集中式版本控制系统(CVCS)"></a>问题一：分布式版本控制(DVCS) 对比集中式版本控制系统(CVCS)</h4><p>&emsp;&emsp;由于Git的持续火热， 对于DVCS与CVCS的争论和对比越来越多了， 似乎很多文章都倾向于这个观点：</p><pre><code>&quot; Git这种DVCS 要比SVN这些DVCS要优越&quot; </code></pre><p>&emsp;&emsp;实际情况真的是这样吗？ 现在请同学们各抒己见， 以各个方面来分析下CVCS与 DVCS之间的优缺点. </p><p><strong>回答：</strong></p><p>&emsp;&emsp;<strong>分布式版本控制 (DVCS) :</strong>一种不需要中心服务器的管理文件版本的方法，但是它也可以使用中心服务器。更改可以被合并到 DVCS 的任何其他用户的系统中，因此可以实现非常灵活的工作流。</p><p><strong>主要优点：</strong></p><ul><li><p>版本控制更加灵活，因为它除了支持传统的（集中式）工作流，还支持其他各种工作流；</p></li><li><p>比集中式服务器快得多，因为大多数操作在客户机本地进行，而不需要网络操作。</p></li></ul><p>&emsp;&emsp;<strong>集中式版本控制（ CVCS）：</strong>这类系统，诸如 CVS、Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p><p><strong>优点与缺点：</strong></p><ul><li><p>每个人都可以在一定程度上看到项目中的其他人正在做些什么。 而管理员也可以轻松掌控每个开发者的权限，并且管理一个 CVCS 要远比在各个客户端上维护本地数据库来得轻松容易。</p></li><li><p>最显而易见的缺点是中央服务器的单点故障。 如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</p></li></ul><p><strong>DVCS 和集中式版本控制系统的主要差异：</strong></p><p>&emsp;&emsp;在 DVCS 和集中式版本控制系统之间有三个关键差异：</p><ul><li><p>DVCS 通过本地提交支持离线工作，这是由 DVCS 的操作方式决定的。这与集中式版本控制完全不同，集中式版本控制要求通过到中心服务器的连接执行所有操作。这种灵活性让开发人员在飞机上也能够像在办公室中一样轻松地工作，可以一次又一次地进行提交。</p></li><li><p>DVCS 比集中式系统更灵活，因为 DVCS 支持许多不同类型的工作流，从传统的集中式工作流到纯粹的特殊工作流，再到特殊工作流和集中式工作流的组合。这种灵活性允许通过电子邮件、对等网络和开发团队喜欢的任何方式进行开发。</p></li><li><p>DVCS 比集中式版本控制系统快得多，因为大多数操作在客户机上进行，速度非常快。另外，在需要进行推（push）操作（与另一个节点通信）时，速度也更快，因为两个客户机机器上都有完整的元数据。速度差异相当显著，根据使用本地存储库还是网络存储库，DVCS 比Subversion 快大约 3-10 倍。</p></li></ul><p><strong>观点分析：</strong>“Git这种DVCS 要比SVN这些DVCS要优越”</p><ul><li><p>SVN属于集中化的版本控制系统，SVN使用起来有点像是档案仓库的感觉，支持并行读写文件，支持代码的版本化管理，功能包括取出、导入、更新、分支、改名、还原、合并等。SVN大都采用图形界面操作，直观，上手快。</p></li><li><p>Git是一个分布式版本控制系统，操作命令包括：clone，pull，push,branch ,merge ,push,rebase，Git擅长的是程序代码的版本化管理。不支持中文，图形界面支持差，使用难度大。不易推广。</p></li><li><p>SVN更适用于项目管理， Git仅适用于代码管理。    </p></li><li><p>一个研发队伍的成员正常包括：需求分析、设计、美工、程序员、测试、实施、运维，每个成员在工作中都有产出物，  包括了文档、设计代码、程序代码，这些都需要按项目集中进行管理的。SVN能清楚的按目录进行分类管理， 使项目组的管理处于有序高效。而很容易的实现了对本地代码修改的记录，而这整个过程中，根本没出现服务器。</p></li></ul><p><strong>其他详细内容参考下面推荐文章。</strong></p><ul><li><p><a href="http://blog.jobbole.com/31444/" target="_blank" rel="noopener">Git和SVN之间的五个基本区别；</a></p></li><li><p><a href="http://jingyan.baidu.com/article/676629976401a154d51b8430.html" target="_blank" rel="noopener">SVN和Git比较，哪个好用，适用？</a></p></li><li><p><a href="http://blog.csdn.net/zssureqh/article/details/39117601" target="_blank" rel="noopener">版本控制：SVN和GIT的一些使用感受</a></p></li><li><p><a href="http://www.tuicool.com/articles/bMF32iE" target="_blank" rel="noopener">关于本地、集中式、分布式三种版本控制系统</a> </p></li><li><p><a href="http://www.ibm.com/developerworks/cn/aix/library/au-dist_ver_control/" target="_blank" rel="noopener">分布式版本控制系统入门</a> </p></li></ul><h4 id="问题二：在命令介绍中-多次提到的-–-是用来做什么的？"><a href="#问题二：在命令介绍中-多次提到的-–-是用来做什么的？" class="headerlink" title="问题二：在命令介绍中 多次提到的 – 是用来做什么的？"></a>问题二：在命令介绍中 多次提到的 – 是用来做什么的？</h4><p>在课程中， 可以发现讲师多次在命令中使用到了 – 符号， 比如 </p><pre><code>git checkout -- &lt;filename&gt;</code></pre><p>事实上 很多时候 你使用  git checkout <filename>  也不会有问题。</filename></p><p>那么问题来了，  –  到底是用来做什么的呢？</p><p><strong>回答：</strong>（这个是参考别人的）</p><p><code>--代表后面的参数是命令，如果没有--，一般指分支或者路径</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要是用来区分文件目录和命令的关系。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">题目中“--”后面的表示把后面连接的参数当做文件名，不管它长什么样子。它是unix的命令行规范。通常，我们使用“--”去区分后面的是一个命令还是一个参数。比如下面例子：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm -f      # does nothing</span><br><span class="line"></span><br><span class="line">rm -- -f   # deletes a file named &quot;-f&quot;</span><br><span class="line"></span><br><span class="line">一般我们通过使用它来区分文件名和命令参数，如果一个文件名刚好和我们常用的命令冲突了，--就可以很好的解决这个问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通常都会加上“--”来区分使用。</span><br><span class="line"></span><br><span class="line">具体规范和标准可以看unix命令行参数语法规范标准，IEEE Std 1003.1, 2013 Edition标准</span><br><span class="line"></span><br><span class="line">Guideline 10:</span><br><span class="line"></span><br><span class="line">The first -- argument that is not an option-argument should be accepted as a delimiter indicating the end of options. Any following arguments should be treated as operands, even if they begin with the &apos;-&apos; character.</span><br></pre></td></tr></table></figure><p>####问题三：某文件在暂存区与工作目录的内容不一致时， 使用git checkout HEAD – <filename> 将导致什么结果？</filename></p><p><strong>解答：</strong></p><p><strong>结论：</strong>git checkout HEAD – <filename> 将内容从上次提交复制到工作目录。当某文件在暂存区与工作目录的内容不一致时， 使用git checkout HEAD – <filename> 将导致工作目录被上次提交的覆盖，这时候暂存区也就没有修改了，clean掉了。其实就是本地和暂存区都被上一次的提交覆盖了。</filename></filename></p><p>简单实验了下，测试过程如下：</p><p>1、首先新建了一个test.txt文件，文件是空的。这时候我们将test.txt add到暂存区，此时暂存区存在新的文件test.txt。<br><img src="http://img.blog.csdn.net/20160605121432516" alt="这里写图片描述"><br>2、将暂存区的修改提交到提交区，这时候暂存区也就没有需要提交的东西了。<br><img src="http://img.blog.csdn.net/20160605121442907" alt="这里写图片描述"><br>3、本地修改test.txt文件，随便输入一些字符。此时test.txt文件大小为1KB<br><img src="http://img.blog.csdn.net/20160605121452189" alt="这里写图片描述"><br>4、此时，查看暂存区，发现暂存区存在修改文件，test.txt，这时候，test.txt文件在暂存区与工作目录的内容不一致<br><img src="http://img.blog.csdn.net/20160605121507017" alt="这里写图片描述"><br>5、执行git checkout HEAD – <filename>，发现暂存区不存在修改文件，查看本地目录，test.txt文件已经为空，被上次提交区的空test.txt覆盖<br><img src="http://img.blog.csdn.net/20160605121516017" alt="这里写图片描述"><br>此时test.txt文件为空，0KB<br><img src="http://img.blog.csdn.net/20160605121528799" alt="这里写图片描述"></filename></p><h4 id="问题四：为什么大部分情况下，git-fetch-要优于直接使用-git-pull"><a href="#问题四：为什么大部分情况下，git-fetch-要优于直接使用-git-pull" class="headerlink" title="问题四：为什么大部分情况下，git fetch 要优于直接使用 git pull?"></a>问题四：为什么大部分情况下，git fetch 要优于直接使用 git pull?</h4><p>不难发现， 课程中对于可能常用的 git pull 命令着墨不多.  而把大量的时间放在了 git fetch + git merge 的工作原理上。  </p><p>同学可以总结下，为何使用git fetch来分步骤处理 要优于直接使用git pull？</p><p><strong>回答：</strong></p><p>&emsp;&emsp;git pull的问题是它把过程的细节都隐藏了起来，以至于你不用去了解git中各种类型分支的区别和使用方法。当然，多数时候这是没问题的，但一旦代码有问题，你很难找到出错的地方。</p><p>&emsp;&emsp;将下载（fetch）和合并（merge）放到一个命令里的另外一个弊端是，你的本地工作目录在未经确认的情况下就会被远程分支更新。当然，除非你关闭所有的安全选项，否则git pull在你本地工作目录还不至于造成不可挽回的损失，但很多时候我们宁愿做的慢一些，也不愿意返工重来。</p><p>&emsp;&emsp;前面那些行显示出“git fetch”命令会将哪些文件下载到本地，这些文件一旦下载到本地之后，就可以在本地进行任意操作了。</p><p>&emsp;&emsp;“git fetch”命令执行完毕之后，还不会立即将下载的文件合并到你当前工作目录里，这就给你了一个选择下一步操作的机会，要是想将从远程分支下载的文件更新到你的工作目录里，你需要执行一个“合并（merge）”操作。</p><p>&emsp;&emsp;单独进行下载和合并是一个好的做法，你可以先看看下载的是什么，然后再决定是否和本地代码合并。而且分开来做，可以清晰的区别开本地分支和远程分支，方便选择使用。</p><p><strong>文章推荐：</strong><a href="http://www.oschina.net/translate/git-fetch-and-merge" target="_blank" rel="noopener">Git 少用 Pull 多用 Fetch 和 Merge</a> </p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><h4 id="问题一：市面上这么多种模块系统，-它们之间可以相互转换吗"><a href="#问题一：市面上这么多种模块系统，-它们之间可以相互转换吗" class="headerlink" title="问题一：市面上这么多种模块系统， 它们之间可以相互转换吗"></a>问题一：市面上这么多种模块系统， 它们之间可以相互转换吗</h4><p>&emsp;&emsp;AMD、COMMONJS、CMD、UMD、ES6 Module、IIFE… 这么多的模块写法， 一旦你选择了一种模块写法，那它在另一个系统中就可能无法运行了。 值得庆幸的是，现在越来越多的工具可以帮助我们将js从一种模块写法转换为另一种写法， 你能帮助同学们列举出一个或多个转换工具吗？</p><p><strong>回答：</strong></p><p>1、Browserify </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">兼容 Node 模块引用语法和 Node 模块化文件加载方案, </span><br><span class="line">浏览器端运行前需要完成代码的合并, 并配合 SourceMap 进行调试.</span><br></pre></td></tr></table></figure><p>2、Webpack<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理</span><br></pre></td></tr></table></figure></p><p>3、Component<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是一个对客户端 JavaScript 包进行管理的工具，用于更好的构建 Web 应用，编写模块化 commonjs 组件</span><br></pre></td></tr></table></figure></p><p>4 rderjs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个开源的 JS 按需、异步加载工具，同时也是 JS 模块化管理工具。</span><br></pre></td></tr></table></figure></p><p>5 systemjs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个最小系统加载工具。</span><br></pre></td></tr></table></figure></p><h4 id="问题二：关于通信解决方案-xhr-与-socket的取舍"><a href="#问题二：关于通信解决方案-xhr-与-socket的取舍" class="headerlink" title="问题二：关于通信解决方案 xhr 与 socket的取舍"></a>问题二：关于通信解决方案 xhr 与 socket的取舍</h4><p>&emsp;&emsp;视频里介绍了一个双向实时通信解决方案socket.io。你能说出一些这种解决方案的适合场景吗？<br>&emsp;&emsp;实时上在规范中，还有一个Server-Send-Event的规范， 可以帮助我们实现服务器端-&gt;浏览器端的反向消息推送，同学们可以下去学习一下。</p><p><strong>回答：</strong></p><p>&emsp;&emsp;Socket.IO设计的目标是构建能够在不同浏览器和移动设备上良好运行的实时应用，如实时分析系统、二进制流数据处理应用、在线聊天室、在线客服系 统、评论系统、WebIM等。目前，Socket.IO已经支持主流PC浏览器(如IE、Safari、Chrome、Firefox、Opera等)和 移动平台上的浏览器（iOS平台下的Safari、Android平台下的基于Webkit的浏览器等）。</p><p>&emsp;&emsp;参考自<a href="http://www.infoq.com/cn/news/2015/01/socket-io-websocket/" target="_blank" rel="noopener">《Socket.IO：支持WebSocket协议、用于实时通信和跨平台的框架》</a></p><h4 id="问题三：大型的组件库为什么都用到了预处理？"><a href="#问题三：大型的组件库为什么都用到了预处理？" class="headerlink" title="问题三：大型的组件库为什么都用到了预处理？"></a>问题三：大型的组件库为什么都用到了预处理？</h4><p>&emsp;&emsp;事实上处理bootstrap、foundation. 还有一些其它类似规模的组件库， 它们或许在设计和css构建上理念上有部分区别， 它们都非常一致的使用了css预处理器来管理css文件， 你能说出这么做的好处吗？</p><p><strong>回答：</strong></p><ul><li>让 CSS 更见简洁，适应性更强，代码更直观，节省了大量的重复工作和痛苦的代码编辑；</li></ul><p>参考自：<a href="http://www.oschina.net/question/12_44255?sort=default&amp;p=4" target="_blank" rel="noopener">《为您详细比较三个 CSS 预处理器（框架）：Sass、LESS 和 Stylus》</a></p><ul><li>缓解多浏览器兼容造成的冗余；</li></ul><p>参考自<a href="https://segmentfault.com/q/1010000002527156/a-1020000002527759" target="_blank" rel="noopener">《为什么要使用CSS预处理器？》</a></p><ul><li>提供CSS缺失的样式层复用机制，提高CSS代码的可维护性</li></ul><h3 id="开发实践"><a href="#开发实践" class="headerlink" title="开发实践"></a>开发实践</h3><h4 id="问题一：采用文档形式的规范输出有哪些弊端？"><a href="#问题一：采用文档形式的规范输出有哪些弊端？" class="headerlink" title="问题一：采用文档形式的规范输出有哪些弊端？"></a>问题一：采用文档形式的规范输出有哪些弊端？</h4><p>&emsp;&emsp;采用文档形式的规范输出有哪些弊端？可以从协作、后续对规范的重用等方面进行讨论</p><p><strong>回答：</strong></p><ul><li><p>假设题目里面说的是开发规范。文档类型的规范的效力依赖于开发人员的对规范的理解，和遵守规范的程度，需要再有一层QA进行保障。还有就是文档规范需要根<br>据技术和业务的发展定期更新，更新后还要宣贯。否则可能就过时或者成为纸上的规范。尽量还是能通过工具、统一的框架、模块来规范输出。</p></li><li><p>从协助上来说：没有统一规范的管理，可能导致更新不及时，协助起来大家阅读时存在一些问题等。从后续重用性来说：文档形式的规范输出难以保证完全的统一和规范性，后续的修改和重用还需要先了解前面的具体规范再做进一步修改，学习成本更大，且容易导致问题。</p></li></ul><h4 id="问题二：实际项目中对系统进行分解的难点有哪些？"><a href="#问题二：实际项目中对系统进行分解的难点有哪些？" class="headerlink" title="问题二：实际项目中对系统进行分解的难点有哪些？"></a>问题二：实际项目中对系统进行分解的难点有哪些？</h4><p>&emsp;&emsp;实际项目中对系统进行分解的难点有哪些？</p><p><strong>回答：仁智见仁，智者见智。没有实际经验回答个毛！！</strong></p><h4 id="问题三：如何根据交互提取通用组件"><a href="#问题三：如何根据交互提取通用组件" class="headerlink" title="问题三：如何根据交互提取通用组件"></a>问题三：如何根据交互提取通用组件</h4><p>&emsp;&emsp;如何根据交互提取通用组件？交互稿中哪些可以作为通用的组件进行封装？</p><p><strong>回答：</strong></p><p>&emsp;&emsp;视觉说明中包含各个情况下用户界面的显示样式，其定义了交互稿中的所有效果。之后则需要从中提取出通用组件，其中包括：</p><ul><li><p>通用原件（Logo，提示，输入框，图标，按钮等）</p></li><li><p>通用列表（以网易云音乐为例，一般歌单，排行榜，收藏列表，歌手等）</p></li><li><p>复合组件（留言板类，评论控件）</p></li><li><p>浮层弹出</p></li></ul><h4 id="问题四：项目发布时需要做哪些优化？"><a href="#问题四：项目发布时需要做哪些优化？" class="headerlink" title="问题四：项目发布时需要做哪些优化？"></a>问题四：项目发布时需要做哪些优化？</h4><p><strong>回答:</strong></p><ul><li><p>图片的优化，压缩大小</p></li><li><p>CDN的配置</p></li><li><p>代码的压缩和合并</p></li></ul><h4 id="问题五：实际项目中发布工具的哪些功能是你比较关注的？"><a href="#问题五：实际项目中发布工具的哪些功能是你比较关注的？" class="headerlink" title="问题五：实际项目中发布工具的哪些功能是你比较关注的？"></a>问题五：实际项目中发布工具的哪些功能是你比较关注的？</h4><p><strong>回答：仁智见仁，智者见智。没有实际经验回答个毛！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本课程为网易云课堂 - - 前端开发工程师 - - &lt;a href=&quot;http://mooc.study.163.com/course/NEU-1000054002?tid=2001219010#/info&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="Web前端" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Web综合" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/Web%E7%BB%BC%E5%90%88/"/>
    
    
  </entry>
  
  <entry>
    <title>《DOM编程艺术》课堂交流问题汇总之基础篇</title>
    <link href="https://sophoraflower.github.io/EverQuest/2016/0524/%E3%80%8ADOM%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E3%80%8B%E8%AF%BE%E5%A0%82%E4%BA%A4%E6%B5%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://sophoraflower.github.io/EverQuest/2016/0524/《DOM编程艺术》课堂交流问题汇总之基础篇/</id>
    <published>2016-05-24T02:53:00.000Z</published>
    <updated>2018-01-20T23:47:28.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本课程为网易云课堂 - - 前端开发工程师 - - <a href="http://mooc.study.163.com/course/NEU-1000054004?tid=2001219008#/info" target="_blank" rel="noopener">《DOM编程艺术》</a>学习总结</p></blockquote><h3 id="问题一：实现浏览器兼容版的element-children"><a href="#问题一：实现浏览器兼容版的element-children" class="headerlink" title="问题一：实现浏览器兼容版的element.children"></a>问题一：实现浏览器兼容版的element.children</h3><p>element.children能够获取元素的元素子节点，但是低版本的ie不支持，如何在低版本的ie上兼容类似的功能。</p><p> <strong>分析解答：</strong></p><p>思路：</p><ul><li><p>写一个函数getElementChild(element),传入一个父节点element.</p></li><li><p>判断DOM中element对象的children属性是否存在，存在则直接返回element.children,不存在则执行兼容代码.</p></li><li><p>兼容代码思路：</p><ul><li>创建一个数组elementArr以便返回最终 [符合要求] 的子节点集合。</li><li>调用element对象的childNodes属性，以获取其子节点集合。</li><li>遍历子节点集合，对每一个子节点进行判断，如果节点类型为1（即节点类型为元素节点）,则添加到elementArr返回数组中。</li><li>返回数组elementArr</li></ul></li></ul><p>解决代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodeType=1 元素节点 nodeType=2 属性节点 nodeType=3 文本节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementChild</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!element.children) &#123;  <span class="comment">//如果没有children方法</span></span><br><span class="line">          <span class="keyword">var</span> result_elementchild = [],    <span class="comment">//新的元素子节点数组</span></span><br><span class="line">          nodelist = element.childNodes;    <span class="comment">//获取所有子节点</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodelist.length; i++) &#123;</span><br><span class="line">              <span class="keyword">if</span>(nodelist[i].nodeType == <span class="number">1</span>)&#123;        <span class="comment">//判断节点是否为元素节点</span></span><br><span class="line">                  result_elementchild.push(nodelist[i]);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">              <span class="keyword">return</span> result_elementchild;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> element.children;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题二：实现浏览器兼容版的element-dataset"><a href="#问题二：实现浏览器兼容版的element-dataset" class="headerlink" title="问题二：实现浏览器兼容版的element.dataset"></a>问题二：实现浏览器兼容版的element.dataset</h3><p>element.dataset能够获取元素的自定义属性，但是低版本的ie不支持，如何在低版本的ie上兼容类似的功能。</p><p>相关文章推荐：</p><ul><li><p><a href="http://blog.csdn.net/willspace/article/details/46859885" target="_blank" rel="noopener">HTML data属性简介以及低版本浏览器兼容算法</a> （很经典，不错的文章）</p></li><li><p><a href="http://www.zhangxinxu.com/wordpress/2011/06/html5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%AF%B9%E8%B1%A1dataset%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">HTML5自定义属性对象Dataset简介</a></p></li></ul><p>分析解答：</p><p>思路：</p><ol><li><p>找到元素中以data-开头的属性名，取到其名称。</p></li><li><p>根据dataset的驼峰命名，将data-后面的名称以驼峰命名的方式得到对应的ID名称。</p></li><li><p>构建ID名称和属性名称的键值对。</p></li><li><p>使用var attribute = element.getAttribute(attributeName)方法，从键值对中找到ID对应的属性名作为attributeName得到其对应的属性值，然后赋值给对应的ID元素。 </p></li></ol><p>解答：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//正则表达式变换首字母大写  </span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">replaceReg</span>(<span class="params">str</span>)</span>&#123;   </span><br><span class="line">       <span class="keyword">var</span> reg = <span class="regexp">/\b(\w)|\s(\w)/g</span>;   </span><br><span class="line">       str = str.toLowerCase();   </span><br><span class="line">       <span class="keyword">return</span> str.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;<span class="keyword">return</span> m.toUpperCase()&#125;)   </span><br><span class="line"> &#125;  </span><br><span class="line"><span class="comment">//带兼容的函数  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_dataset</span>(<span class="params">ele</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(ele.dataset)  </span><br><span class="line">        <span class="keyword">return</span> ele.dataset;  </span><br><span class="line">    <span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="comment">//一下是兼容代码  </span></span><br><span class="line">        <span class="keyword">var</span> dataset = &#123;&#125;;  </span><br><span class="line">        <span class="keyword">var</span> ele_split = ele.outerHTML.split(<span class="string">" "</span>);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,element; i &lt; ele_split.length; i++)      </span><br><span class="line">        &#123;  </span><br><span class="line">            element = ele_split[i];  </span><br><span class="line">            <span class="keyword">if</span> (element.substring(<span class="number">0</span>,<span class="number">4</span>) == <span class="string">"data"</span>) &#123;   </span><br><span class="line">                <span class="keyword">if</span> (element.indexOf(<span class="string">"&gt;"</span>) !=  <span class="number">-1</span>) &#123;   </span><br><span class="line">                    element = element.split(<span class="string">"&gt;"</span>)[<span class="number">0</span>];  </span><br><span class="line">                &#125;;  </span><br><span class="line">                ele_key=element.split(<span class="string">"="</span>)[<span class="number">0</span>].slice(<span class="number">5</span>);  </span><br><span class="line">                ele_value=element.split(<span class="string">"="</span>)[<span class="number">1</span>].slice(<span class="number">1</span>,<span class="number">-1</span>);  </span><br><span class="line">                <span class="keyword">if</span>(ele_key.indexOf(<span class="string">"-"</span>) ==  <span class="number">-1</span>)&#123;  </span><br><span class="line">                    dataset[ele_key] = ele_value;  </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                    ele_keys=ele_key.split(<span class="string">"-"</span>);  </span><br><span class="line">                    ele_key=ele_keys[<span class="number">0</span>];  </span><br><span class="line">                    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;ele_keys.length;i++)&#123;  </span><br><span class="line">                        ele_key+=replaceReg(ele_keys[i]);  </span><br><span class="line">                    &#125;                 </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> dataset;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本课程为网易云课堂 - - 前端开发工程师 - - &lt;a href=&quot;http://mooc.study.163.com/course/NEU-1000054004?tid=2001219008#/info&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="Web前端" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://sophoraflower.github.io/EverQuest/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript程序设计》课堂交流问题汇总之进阶篇</title>
    <link href="https://sophoraflower.github.io/EverQuest/2016/0518/%E3%80%8AJavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BE%E5%A0%82%E4%BA%A4%E6%B5%81%E5%8C%BA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>https://sophoraflower.github.io/EverQuest/2016/0518/《JavaScript程序设计》课堂交流区问题汇总之进阶篇/</id>
    <published>2016-05-18T14:03:00.000Z</published>
    <updated>2018-01-20T23:47:16.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本课程为网易云课堂 - - 前端开发工程师 - - <a href="http://mooc.study.163.com/course/NEU-1000054003#/info" target="_blank" rel="noopener">《JavaScript程序设计》</a>学习总结</p></blockquote><h3 id="问题一：复制对象"><a href="#问题一：复制对象" class="headerlink" title="问题一：复制对象"></a>问题一：复制对象</h3><p>&emsp;&emsp;通过课程学习我们知道，对象作为引用类型，使用运算符=时，只是复制了对象的地址。</p><p>&emsp;&emsp;比如如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.a = <span class="number">2</span>; <span class="comment">// 此时obj1.a ===</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改对象obj2同时会改变obj1，那么如果我们需要克隆出一个独立但属性、方法完全一样的对象，该如何实现？</p><p>&emsp;&emsp;<strong>解答：</strong></p><ul><li>使用for  in</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2=<span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> obj) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">var</span> name=p;<span class="comment">//属性名称 </span></span><br><span class="line"><span class="keyword">var</span> value=obj[p];<span class="comment">//属性对应的值 </span></span><br><span class="line">obj2[name]=obj[p]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;参考：<a href="http://www.jb51.net/article/42350.htm" target="_blank" rel="noopener">js中如何复制一个对象并获取其所有属性和属性对应的值</a></p><ul><li>定义一个clone方法来实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">myObj</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span>(myObj) != <span class="string">'object'</span>) <span class="keyword">return</span> myObj;  </span><br><span class="line">  <span class="keyword">if</span>(myObj == <span class="literal">null</span>) <span class="keyword">return</span> myObj;  </span><br><span class="line">     </span><br><span class="line">  <span class="keyword">var</span> myNewObj = <span class="keyword">new</span> <span class="built_in">Object</span>();  </span><br><span class="line">     </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> myObj)  </span><br><span class="line">     myNewObj[i] = clone(myObj[i]);  </span><br><span class="line">     </span><br><span class="line">  <span class="keyword">return</span> myNewObj;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过object原型扩展实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.Clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">   </span>&#123;  </span><br><span class="line">       <span class="keyword">var</span> objClone;  </span><br><span class="line">       <span class="keyword">if</span> ( <span class="keyword">this</span>.constructor == <span class="built_in">Object</span> ) objClone = <span class="keyword">new</span> <span class="keyword">this</span>.constructor();  </span><br><span class="line">       <span class="keyword">else</span> objClone = <span class="keyword">new</span> <span class="keyword">this</span>.constructor(<span class="keyword">this</span>.valueOf());  </span><br><span class="line">       <span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span> )  </span><br><span class="line">        &#123;  </span><br><span class="line">           <span class="keyword">if</span> ( objClone[key] != <span class="keyword">this</span>[key] )  </span><br><span class="line">            &#123;  </span><br><span class="line">               <span class="keyword">if</span> ( <span class="keyword">typeof</span>(<span class="keyword">this</span>[key]) == <span class="string">'object'</span> )  </span><br><span class="line">                &#123;  </span><br><span class="line">                    objClone[key] = <span class="keyword">this</span>[key].Clone();  </span><br><span class="line">                &#125;  </span><br><span class="line">               <span class="keyword">else</span>  </span><br><span class="line">                &#123;  </span><br><span class="line">                    objClone[key] = <span class="keyword">this</span>[key];  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        objClone.toString = <span class="keyword">this</span>.toString;  </span><br><span class="line">        objClone.valueOf = <span class="keyword">this</span>.valueOf;  </span><br><span class="line">       <span class="keyword">return</span> objClone;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;参考：<a href="http://www.cnblogs.com/spring4/archive/2012/03/29/2483708.html" target="_blank" rel="noopener">js对象复制</a></p><h3 id="问题二：JS和强类型语言（比如C-）在类型方面的主要区别"><a href="#问题二：JS和强类型语言（比如C-）在类型方面的主要区别" class="headerlink" title="问题二：JS和强类型语言（比如C++）在类型方面的主要区别"></a>问题二：JS和强类型语言（比如C++）在类型方面的主要区别</h3><p>&emsp;&emsp;<strong>解答：</strong></p><p>&emsp;&emsp;<strong>强类型定义语言</strong>：强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。</p><p>&emsp;&emsp;<strong>弱类型定义语言</strong>：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。</p><p>&emsp;&emsp;<strong>二者的区别</strong>，在于计算时是否可以不同类型之间对使用者透明地隐式转换。从使用者的角度来看，如果一个语言可以隐式转换它的所有类型，那么它的变量、表达式等在参与运算时，即使类型不正确，也能通过隐式转换来得到正确地类型，这对使用者而言，就好像所有类型都能进行所有运算一样，所以这样的语言被称作弱类型。</p><p>&emsp;&emsp;与此相对，强类型语言的类型之间不一定有隐式转换（比如C++是一门强类型语言，但C++中double和int可以互相转换，但double和任何类型的指针之间</p><h3 id="问题三：隐式类型转换场景"><a href="#问题三：隐式类型转换场景" class="headerlink" title="问题三：隐式类型转换场景"></a>问题三：隐式类型转换场景</h3><p>&emsp;&emsp;解答：</p><ul><li>四则运算</li></ul><p>&emsp;&emsp;加法运算符+是双目运算符，只要其中一个是String类型，表达式的值便是一个String。</p><p>&emsp;&emsp;对于其他的四则运算，只有其中一个是Number类型，表达式的值便是一个Number。</p><p>&emsp;&emsp;对于非法字符的情况通常会返回NaN：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span> * <span class="string">'a'</span>     <span class="comment">// =&gt; NaN，这是因为parseInt(a)值为NaN，1 * NaN 还是 NaN</span></span><br></pre></td></tr></table></figure><ul><li>判断语句</li></ul><p>&emsp;&emsp;判断语句中的判断条件需要是Boolean类型，所以条件表达式会被隐式转换为Boolean。<br> 其转换规则同Boolean的构造函数。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;<span class="keyword">if</span>(obj)&#123;</span><br><span class="line">    <span class="keyword">while</span>(obj);&#125;</span><br></pre></td></tr></table></figure><ul><li>Native代码调用</li></ul><p>&emsp;&emsp;JavaScript宿主环境都会提供大量的对象，它们往往不少通过JavaScript来实现的。 JavaScript给这些函数传入的参数也会进行隐式转换。例如BOM提供的alert方法接受String类型的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);    <span class="comment">// =&gt; [object Object]</span></span><br></pre></td></tr></table></figure><ul><li>==</li></ul><p>&emsp;&emsp;JS的非严格匹配时会进行隐式类型转换。</p><h3 id="问题四：识别类型方法"><a href="#问题四：识别类型方法" class="headerlink" title="问题四：识别类型方法"></a>问题四：识别类型方法</h3><p>&emsp;&emsp;<strong>解答：</strong></p><ul><li><p>typeof : 可以识别除null之外的基本类型及对象类型，不能识别具体对象;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>;<span class="comment">//"number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">"1"</span>;<span class="comment">//"string"</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;;<span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span> [];<span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>;<span class="comment">//"undefined";</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;<span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>;<span class="comment">//"boolean"</span></span><br></pre></td></tr></table></figure></li><li><p>instanceof : 可以识别Object类型和自定义类型，不能识别基本类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;<span class="comment">//true</span></span><br><span class="line">(&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Object</span>;<span class="comment">//true</span></span><br><span class="line">(<span class="number">1</span>) <span class="keyword">instanceof</span> <span class="built_in">Object</span>;<span class="comment">//false</span></span><br><span class="line">(<span class="number">1</span>) <span class="keyword">instanceof</span> <span class="built_in">Number</span>;<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>constructor : 识别除null和undefined的内置类型及自定义类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).constructor===<span class="built_in">Number</span>;<span class="comment">//true</span></span><br><span class="line"><span class="string">"1"</span>.constructor===<span class="built_in">String</span>;<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>Object.prototype.toString().call(obj) : 可以识别标准类型以及内置对象类型；不能识别自定义对象类型；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString().call(<span class="literal">null</span>);<span class="comment">//"[object Null]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString().call(<span class="literal">undefined</span>);<span class="comment">//"[object Undefined]"</span></span><br></pre></td></tr></table></figure></li><li><p>组合封装函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取对象构造函数名称</span></span><br><span class="line"><span class="comment"> * 视频中关于getConstructorName函数写法存在bug，导致传入 0,   false, "", NaN 这些值时，得到错误的返回结果。</span></span><br><span class="line"><span class="comment"> * 1. 入参obj如果是undefined和null，则返回其自身;</span></span><br><span class="line"><span class="comment"> * 2. 入参obj如果是其他值，则返回obj.constructor&amp;&amp;obj.constructor.toString().match(/function\s*([^(]*)/)[1]的结果;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getConstructorName</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> (obj===<span class="literal">undefined</span>||obj===<span class="literal">null</span>)?obj:(obj.constructor&amp;&amp;obj.constructor.toString().match(<span class="regexp">/function\s*([^(]*)/</span>)[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="问题五：函数声明和函数表达式定义同一个函数时，执行的是哪个？"><a href="#问题五：函数声明和函数表达式定义同一个函数时，执行的是哪个？" class="headerlink" title="问题五：函数声明和函数表达式定义同一个函数时，执行的是哪个？"></a>问题五：函数声明和函数表达式定义同一个函数时，执行的是哪个？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下代码执行时，三次打印分别输出什么？为什么？</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"函数声明："</span>+(i+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> add1 = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"函数表达式："</span>+(i+<span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"函数声明："</span>+(i+<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>解析：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"函数声明："</span>+(i+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>);  <span class="comment">//函数声明：101        因为函数声明会被预置到代码顶部，相同的声明后一个起作用，所以调用的是下页的那个函数声明</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">var</span> add1 = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"函数表达式："</span>+(i+<span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>); <span class="comment">//函数表达式：11       因为函数声明已被同名函数表达式覆盖</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"函数声明："</span>+(i+<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>); <span class="comment">//函数表达式：11        因为函数声明已被同名函数表达式覆盖</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预解析如下</span></span><br><span class="line"><span class="keyword">var</span> add1;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"函数声明："</span>+(i+<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>);</span><br><span class="line">   </span><br><span class="line">add1 = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"函数表达式："</span>+(i+<span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">add1(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>结果如下：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数声明：<span class="number">101</span></span><br><span class="line">函数表达式：<span class="number">11</span></span><br><span class="line">函数表达式：<span class="number">11</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;由于这两点，程序中第一个函数和第三个函数都被提升到了前面，由于函数名<br>相同，后一个覆盖前一个，所以起作用的只有第三个函数，同时第二个以表达式定义的函数的变量名add1也被提升到了程序的前面。 </p><p>&emsp;&emsp;当第一次调用由于变量add1还没有被定义，函数定义就会覆盖掉变量add1的声明，所以执行结果是调用第三个add函数；  当调用第二个add1时，变量add1已经被定义了，所以覆盖掉了函数声明， 所以之后调用add1执行的都是 以函数表达式定义的函数add1了。</p><h3 id="问题六：对象方法中定义的子函数，子函数执行时this指向哪里？"><a href="#问题六：对象方法中定义的子函数，子函数执行时this指向哪里？" class="headerlink" title="问题六：对象方法中定义的子函数，子函数执行时this指向哪里？"></a>问题六：对象方法中定义的子函数，子函数执行时this指向哪里？</h3><p>三个问题：</p><pre><code>以下代码中打印的this是个什么对象？这段代码能否实现使myNumber.value加1的功能？在不放弃helper函数的前提下，有哪些修改方法可以实现正确的功能？</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myNumber = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">          <span class="keyword">this</span>.value += i;</span><br><span class="line">    &#125;</span><br><span class="line">    helper(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myNumber.add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>解析：</strong></p><p>&emsp;&emsp;1. helper中的this指向Window全局变量</p><p>&emsp;&emsp;2. 不能。因为 myNumber.value并未增加</p><ul><li><p>方法一：可以把helper调整为方法函数，这样helper就可以正确引用myNumber为this了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> myNumber = &#123;</span><br><span class="line">        value:<span class="number">1</span>,</span><br><span class="line">        helper:<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">this</span>.value +=i;</span><br><span class="line">        &#125;,</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.helper(i);</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">myNumber.add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myNumber.value);</span><br></pre></td></tr></table></figure></li><li><p>方法二：使用闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myNumber = &#123;</span><br><span class="line">     value: <span class="number">1</span>,</span><br><span class="line">     add: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> thisnew = <span class="keyword">this</span>;</span><br><span class="line">         <span class="comment">// 构建闭包</span></span><br><span class="line">         <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(thisnew);</span><br><span class="line">             thisnew.value += i;</span><br><span class="line">         &#125;</span><br><span class="line">        helper(i);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>方法三：使用方法调用模式，因为方法调用模式可以指向调用者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myNumber = &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.value += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新建一个o对象等于myNumber,将helper方法赋值给该对象，</span></span><br><span class="line">        <span class="comment">// 然后使用方法调用模式，这样可以让helper中的this指向调用者o,即myNumber</span></span><br><span class="line">        <span class="keyword">var</span> o = myNumber;</span><br><span class="line">        o.fn = helper;</span><br><span class="line">        o.fn(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法四：使用apply（call）调用模式，将当前helper方法借用给myNumber对象使用，这样this指向的就是myNumber对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myNumber = &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.value += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// myNumber对象借用helper方法，helper中的this将指向myNumber对象</span></span><br><span class="line">        helper.apply(myNumber,[i]); <span class="comment">//apply方法</span></span><br><span class="line">        helper.call(myNumber,i);  <span class="comment">//call方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="问题七：在变量作用域方面，函数声明和函数表达式有什么区别？"><a href="#问题七：在变量作用域方面，函数声明和函数表达式有什么区别？" class="headerlink" title="问题七：在变量作用域方面，函数声明和函数表达式有什么区别？"></a>问题七：在变量作用域方面，函数声明和函数表达式有什么区别？</h3><p>&emsp;&emsp;<strong>解答：</strong></p><p>&emsp;&emsp;函数声明的执行环境为的上一层执行环境为window，函数表达式的上一层执行环境指向调用它的执行环境。<br>&emsp;&emsp;函数声明会是全局作用域，outer指向window，函数表达式在执行时才会解析，outer指向上一级函数环境。</p><h3 id="问题八：闭包的应用场景有哪些？"><a href="#问题八：闭包的应用场景有哪些？" class="headerlink" title="问题八：闭包的应用场景有哪些？"></a>问题八：闭包的应用场景有哪些？</h3><p>&emsp;&emsp;<strong>解答：</strong></p><p>&emsp;&emsp;闭包的应用场景主要有：保存函数的状态，性能优化和封装；</p><p>&emsp;&emsp;闭包有优点也有缺点，滥用闭包是非常不可取的，</p><p>&emsp;&emsp;使用闭包的注意点</p><p>&emsp;&emsp;1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>&emsp;&emsp;2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><h3 id="问题九：原型继承和类继承有什么区别？"><a href="#问题九：原型继承和类继承有什么区别？" class="headerlink" title="问题九：原型继承和类继承有什么区别？"></a>问题九：原型继承和类继承有什么区别？</h3><p>&emsp;&emsp;<strong>解答：</strong></p><p>&emsp;&emsp;原型继承和类继承是两种认知模式，本质上都是为了抽象（复用代码）。相对于类，原型更初级且更灵活。因此当一个系统内没有太多关联的事物的时候，用原型明显比用类更灵活便捷。</p><p>v原型继承的便捷性表现在系统中对象较少的时候，原型继承不需要构造额外的抽象类和接口就可以实现复用。（如系统里只有猫和狗两种动物的话，没必要再为它们构造一个抽象的“动物类”）</p><p>&emsp;&emsp;原型继承的灵活性还表现在复用模式更加灵活。由于原型和类的模式不一样，所以对复用的判断标准也就不一样，例如把一个红色皮球当做一个太阳的原型，当然是可以的（反过来也行），但显然不能将“恒星类”当做太阳和红球的公共父类（倒是可以用“球体”这个类作为它们的公共父类）。</p><h3 id="问题十：实现一个Circle类"><a href="#问题十：实现一个Circle类" class="headerlink" title="问题十：实现一个Circle类"></a>问题十：实现一个Circle类</h3><p>&emsp;&emsp;编程实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.创建一个圆（Circle）的类，并定义该类的一个属性（半径）和两个方法（周长和面积），其中圆的半径可以通过构造函数初始化</span><br><span class="line"></span><br><span class="line">b.创建圆的一个对象，并调用该对象的方法计算圆的周长和面积</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>解答：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">circle</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cir = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="keyword">this</span>.r = r;</span><br><span class="line">    <span class="keyword">var</span> perimeter = <span class="built_in">Math</span>.PI * <span class="number">2</span> * <span class="keyword">this</span>.r;</span><br><span class="line">    <span class="keyword">var</span> area = <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.r * <span class="keyword">this</span>.r;</span><br><span class="line">    cir.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">"圆的周长："</span>+perimeter+<span class="string">" "</span>+<span class="string">"圆的面积："</span>+area;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> cir;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cir1 = circle(<span class="number">2</span>);</span><br><span class="line">cir1.run();</span><br><span class="line"><span class="comment">//"圆的周长：12.566370614359172 圆的面积：12.566370614359172"</span></span><br><span class="line"><span class="keyword">var</span> cir2 = circle(<span class="number">3</span>);</span><br><span class="line">cir2.run();</span><br><span class="line"><span class="comment">//"圆的周长：18.84955592153876 圆的面积：28.274333882308138"</span></span><br></pre></td></tr></table></figure><p>###问题十一：请使用Js代码写出一个类继承的模型</p><p>&emsp;&emsp;请使用Js代码写出一个类继承的模型，需包含以下实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">定义父类和子类，并创建父类和子类的属性和方法</span><br><span class="line">子类继承父类的属性和方法</span><br><span class="line">在创建子类对象时，调用父类构造函数</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>解答：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand</span>)</span>&#123;<span class="comment">//父类构造器</span></span><br><span class="line">  <span class="keyword">this</span>.brand = brand;<span class="comment">//定义父类属性</span></span><br><span class="line">&#125;</span><br><span class="line">Car.prototype.getBrand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//定义父类方法</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.brand);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Audi</span>(<span class="params">owner</span>)</span>&#123;<span class="comment">//子类构造器</span></span><br><span class="line">  Car.call(<span class="keyword">this</span>,<span class="string">"Audi"</span>);<span class="comment">//继承并设置父类属性</span></span><br><span class="line">  <span class="keyword">this</span>.owner = owner;<span class="comment">//定义子类属性</span></span><br><span class="line">&#125;</span><br><span class="line">Audi.prototype = <span class="keyword">new</span> Car();<span class="comment">//设置子类原型为父类的一个实例，则子类原型的__proto__指向父类原型</span></span><br><span class="line">Audi.prototype.constructor = Audi;<span class="comment">//设置子类的constructor为子类构造器</span></span><br><span class="line">Audi.prototype.getBrand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Car.prototype.getBrand.call(<span class="keyword">this</span>);<span class="comment">//继承父类方法</span></span><br><span class="line">&#125;;</span><br><span class="line">Audi.prototype.getOwner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//定义子类方法</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.owner);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> a4 = <span class="keyword">new</span> Audi(<span class="string">"jhl"</span>);</span><br><span class="line">a4.getBrand();<span class="comment">//Audi</span></span><br><span class="line">a4.getOwner();<span class="comment">//jhl</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本课程为网易云课堂 - - 前端开发工程师 - - &lt;a href=&quot;http://mooc.study.163.com/course/NEU-1000054003#/info&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Ja
      
    
    </summary>
    
      <category term="Web前端" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://sophoraflower.github.io/EverQuest/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript程序设计》课堂交流问题汇总之基础篇</title>
    <link href="https://sophoraflower.github.io/EverQuest/2016/0517/%E3%80%8AJavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BE%E5%A0%82%E4%BA%A4%E6%B5%81%E5%8C%BA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://sophoraflower.github.io/EverQuest/2016/0517/《JavaScript程序设计》课堂交流区问题汇总之基础篇/</id>
    <published>2016-05-17T11:19:00.000Z</published>
    <updated>2018-01-20T23:47:01.380Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本课程为网易云课堂 - - 前端开发工程师 - - <a href="http://mooc.study.163.com/course/NEU-1000054003#/info" target="_blank" rel="noopener">《JavaScript程序设计》</a>学习总结</p></blockquote><h3 id="问题一：获取随机整数"><a href="#问题一：获取随机整数" class="headerlink" title="问题一：获取随机整数"></a>问题一：获取随机整数</h3><p>&emsp;&emsp;获取一个大于等于0且小于等于9的随机整数？</p><p><strong>解答：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：Math.random() -- 返回0和1之间的伪随机数 可能为0，但总是小于1，即取值范围为[0,1)。</span></span><br><span class="line">   <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line"> <span class="comment">// 方法二 : 先取0-1的随机数，然后乘以10，获得0-10的随机数，然后向上取整，然后减1，或者乘以9，获得0-9的随机数，然后向上取整</span></span><br><span class="line">　<span class="keyword">var</span> number=(<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>))<span class="number">-1</span>;</span><br><span class="line">　<span class="keyword">var</span> number=<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">9</span>);</span><br><span class="line"><span class="comment">// 方法三：先取0-1的随机数，然后乘以10，获得0-10的随机数，然后保留0位小数点，获得整数</span></span><br><span class="line">　<span class="keyword">var</span> number=(<span class="built_in">Math</span>.random()*<span class="number">10</span>).toFixed(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//方法四：先取0-1的随机数，然后乘以9.5，获得0-9.5的随机数，然后四舍五入，获得整数</span></span><br><span class="line">　<span class="keyword">var</span> number=<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">9.5</span>);</span><br><span class="line"><span class="comment">//方法五：先取0-1的随机数，然后乘以10，获得0-10的随机数，然后使用parseInt进行数值转换</span></span><br><span class="line">　<span class="keyword">var</span> number=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="问题二：字符删除"><a href="#问题二：字符删除" class="headerlink" title="问题二：字符删除"></a>问题二：字符删除</h3><p>&emsp;&emsp;想要去除一个字符串的第一个字符，有哪些方法可以实现？</p><p><strong>解答：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hellomiaomiao"</span>.replace(<span class="string">"hellomiaomiao"</span>.charAt(<span class="number">0</span>),<span class="string">""</span>);</span><br><span class="line"><span class="string">"ellomiaomiao"</span><span class="comment">//运行结果</span></span><br><span class="line"><span class="string">"hellomiaomiao"</span>.slice(<span class="number">1</span>);</span><br><span class="line"><span class="string">"ellomiaomiao"</span><span class="comment">//运行结果</span></span><br><span class="line"><span class="string">"hellomiaomiao"</span>.substr(<span class="number">1</span>);</span><br><span class="line"><span class="string">"ellomiaomiao"</span><span class="comment">//运行结果</span></span><br><span class="line"><span class="string">"hellomiaomiao"</span>.substring(<span class="number">1</span>);</span><br><span class="line"><span class="string">"ellomiaomiao"</span><span class="comment">//运行结果</span></span><br></pre></td></tr></table></figure><h3 id="问题三：数组求和"><a href="#问题三：数组求和" class="headerlink" title="问题三：数组求和"></a>问题三：数组求和</h3><p>&emsp;&emsp;对一个数组（每项都是数值）求和，有哪些方法？</p><p><strong>解答：</strong></p><p>&emsp;&emsp;首先设定一个作为数据源的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br></pre></td></tr></table></figure><ul><li>every()方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">        sum += item;</span><br><span class="line">        <span class="built_in">console</span>.log(sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//由于every方法是会在遇到回调函数返回的第一个false时停止遍历所以需要始终返回true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    arr.every(getSum);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"use every:sum = "</span> + sum);&#125;)();</span><br></pre></td></tr></table></figure><ul><li>some()方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">         sum += item;</span><br><span class="line">         <span class="built_in">console</span>.log(sum);</span><br><span class="line">     &#125;;</span><br><span class="line">     arr.some(getSum);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"use some:sum = "</span> + sum);&#125;)();</span><br></pre></td></tr></table></figure><ul><li>array.filter()方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">          sum += item;</span><br><span class="line">          <span class="built_in">console</span>.log(sum);</span><br><span class="line">      &#125;;</span><br><span class="line">      arr.filter(getSum);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"use filter:sum = "</span> + sum);&#125;)();</span><br></pre></td></tr></table></figure><ul><li>array.map()方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">           sum += item;</span><br><span class="line">           <span class="built_in">console</span>.log(sum);</span><br><span class="line">       &#125;;</span><br><span class="line">       arr.map(getSum);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"use map:sum = "</span> + sum);&#125;)();</span><br></pre></td></tr></table></figure><ul><li>array.froEach()方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">           sum += item;</span><br><span class="line">           <span class="built_in">console</span>.log(sum);</span><br><span class="line">       &#125;;</span><br><span class="line">       arr.forEach(getSum);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"use forEach:sum = "</span> + sum);&#125;)();</span><br></pre></td></tr></table></figure><ul><li>array.reduce()正向归并方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prevResult, item, index, array</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> prevResult += item;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><ul><li>array.reduceRight()逆向归并方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prevResult, item, index, array</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> prevResult += item;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>for循环方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, sum = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">           sum += arr[i];</span><br><span class="line">           <span class="built_in">console</span>.log(sum);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"use for:sum = "</span> + sum);&#125;)();</span><br></pre></td></tr></table></figure><ul><li>while循环方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> i = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(i&lt;arr.length)&#123;</span><br><span class="line">          sum+=arr[i];</span><br><span class="line">          <span class="built_in">console</span>.log(sum);</span><br><span class="line">          i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"use while:sum = "</span> + sum);&#125;)();</span><br></pre></td></tr></table></figure><ul><li>for -in方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">           sum += arr[index];</span><br><span class="line">           <span class="built_in">console</span>.log(sum);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"use for-in:sum = "</span> + sum);&#125;)();</span><br></pre></td></tr></table></figure><ul><li>forEach()方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calc = &#123;    <span class="attr">sum</span>: <span class="number">0</span>&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.sum += item;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.sum);</span><br><span class="line">   &#125;</span><br><span class="line">   arr.forEach(getSum,calc);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'use forEach and change this:sum='</span> + calc.sum);</span><br></pre></td></tr></table></figure><ul><li>join()方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(arr.join(&quot;+&quot;));</span><br><span class="line">   /*这里先将所有数组项通过字符串&quot;+&quot;连为一个字符串&quot;1+2+3+4+5+6&quot;，然后返回的这个字符串传给eval()方法，eval()方法接收了这段字符串后，就直接将这段字符串中的代码放在当前作用域下执行了。*/</span><br></pre></td></tr></table></figure><p><strong>重点相关文章推荐：</strong><a href="http://blog.csdn.net/lovejulyer/article/details/51200974" target="_blank" rel="noopener">《数组求和方法比较 》</a></p><h3 id="问题四：量词"><a href="#问题四：量词" class="headerlink" title="问题四：量词"></a>问题四：量词</h3><p>&emsp;&emsp;正则表达式中，量词的贪婪模式与惰性模式有什么区别？</p><p><strong>解答：</strong></p><p>&emsp;&emsp;贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。非贪婪模式只被部分NFA引擎所支持。</p><p>&emsp;&emsp;<strong>贪婪量词：</strong>先看整个字符串是否匹配，如果不匹配就把最后一个字符去掉在进行匹配，不匹配继续去掉最后一个字符，指导找到一个匹配或者不剩任何字符才停止。</p><p>&emsp;&emsp;<strong>惰性量词：</strong>先看第一个字符串是否匹配，如果第一个不匹配就在加入第二个字符串依此类推，指导找到一个匹配或者不剩任何字符才停止，贪婪量词与贪婪量词的方法正好相反.</p><p>&emsp;&emsp;浏览器对量词的支持还不完善，IE和OPERA都不支持量词，MOZILLA把支配量词看作是贪婪的。</p><p>&emsp;&emsp;参考文章：</p><ul><li><p><a href="http://www.jb51.net/article/31491.htm" target="_blank" rel="noopener">正则表达式之 贪婪与非贪婪模式详解（概述）</a>；</p></li><li><p><a href="http://blog.sina.com.cn/s/blog_50a82dcd010095sh.html" target="_blank" rel="noopener">JS-正则量词的贪婪、惰性</a></p></li></ul><h3 id="问题五：JSON-stringify兼容"><a href="#问题五：JSON-stringify兼容" class="headerlink" title="问题五：JSON.stringify兼容"></a>问题五：JSON.stringify兼容</h3><p>&emsp;&emsp;JSON.stringify函数在ie6/7中不支持，如何兼容？</p><p><strong>解答：</strong></p><ul><li><p>jQuery插件支持的转换方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.parseJSON( jsonstr ); <span class="comment">//jQuery.parseJSON(jsonstr),可以将json字符串转换成json对象</span></span><br></pre></td></tr></table></figure></li><li><p>Javascript支持的转换方式： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">'('</span> + jsonstr + <span class="string">')'</span>); <span class="comment">//可以将json字符串转换成json对象,注意需要在json字符外包裹一对小括号</span></span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;<strong>注：</strong>ie8(兼容模式),ie7和ie6可以使用eval()将字符串转为JSON对象，但不推荐这些方式，这种方式不安全eval会执行json串中的表达式。</p><ul><li>JSON官方的转换方式： </li></ul><p>&emsp;&emsp;<a href="http://www.json.org/提供了一个json.js,这样ie8(兼容模式),ie7和ie6就可以支持JSON对象以及其stringify()和parse()方法；" target="_blank" rel="noopener">http://www.json.org/提供了一个json.js,这样ie8(兼容模式),ie7和ie6就可以支持JSON对象以及其stringify()和parse()方法；</a><br>可以在<a href="https://github.com/douglascrockford/JSON-js上获取到这个js，一般现在用json2.js。" target="_blank" rel="noopener">https://github.com/douglascrockford/JSON-js上获取到这个js，一般现在用json2.js。</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">    &lt;script src=<span class="string">"json2.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这样JSON.stringify 便可以正常使用！</p><ul><li>判断类型加算法实现：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forIn</span>(<span class="params">obj, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">            handler(i, obj[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">arr, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">        handler(i, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">JSON</span>) &#123;</span><br><span class="line">    <span class="built_in">JSON</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">JSON</span>.parse) &#123;</span><br><span class="line">    <span class="built_in">JSON</span>.parse = <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">'1,'</span> + json)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">JSON</span>.stringify) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">JSON</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="string">'[object Array]'</span>,</span><br><span class="line">            obj = <span class="string">'[object Object]'</span>;</span><br><span class="line">        <span class="built_in">JSON</span>.stringify = <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">var</span> m = <span class="built_in">Object</span>.prototype.toString.call(json);</span><br><span class="line">            <span class="keyword">if</span> (m == arr) &#123;</span><br><span class="line">                t = ArrPartten(json);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == obj) &#123;</span><br><span class="line">                t = ObjectJson(json);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t = json;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ObjectParse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="string">'&#123;'</span>;</span><br><span class="line">            forIn(json, <span class="function"><span class="keyword">function</span>(<span class="params">i, ele</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> m = <span class="built_in">Object</span>.prototype.toString.call(ele);</span><br><span class="line">                <span class="keyword">if</span> (m == arr) &#123;</span><br><span class="line">                    t += i + <span class="string">':'</span> + ArrPartten(ele) + <span class="string">','</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == obj) &#123;</span><br><span class="line">                    t += i + <span class="string">':'</span> + ObjectJson(ele) + <span class="string">','</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t += i + <span class="string">':'</span> + ele + <span class="string">','</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (t.length != <span class="number">1</span>) &#123;</span><br><span class="line">                t = t.substring(<span class="number">0</span>, t.length - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> t + <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ArrayParse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="string">'['</span>;</span><br><span class="line">            each(json, <span class="function"><span class="keyword">function</span>(<span class="params">i, ele</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> m = <span class="built_in">Object</span>.prototype.toString.call(ele);</span><br><span class="line">                <span class="keyword">if</span> (m == arr) &#123;</span><br><span class="line">                    t += ArrPartten(ele) + <span class="string">','</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == obj) &#123;</span><br><span class="line">                    t += ObjectJson(ele) + <span class="string">','</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t += ele + <span class="string">','</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (json.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                t = t.substring(<span class="number">0</span>, t.length - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> t + <span class="string">']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(<span class="built_in">JSON</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断类型加算法实现（版本二）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">window</span>.JSON)&#123;</span><br><span class="line">    <span class="built_in">window</span>.JSON = &#123;</span><br><span class="line">        parse: <span class="function"><span class="keyword">function</span>(<span class="params">sJson</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">"("</span> + sJSON + <span class="string">")"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        stringify: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] == <span class="string">"string"</span>)&#123;</span><br><span class="line">                    <span class="comment">// 如果属性值是String类型，属性值需要加上双引号</span></span><br><span class="line">                    result += <span class="string">"\""</span> + key + <span class="string">"\":\""</span> + obj[key] + <span class="string">"\","</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj[key] <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>)&#123;</span><br><span class="line">                    <span class="comment">// 如果属性是正则表达式，属性值只保留一对空大括号&#123;&#125;</span></span><br><span class="line">                    result += <span class="string">"\""</span> + key + <span class="string">"\":&#123;&#125;,"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] == <span class="string">"undefined"</span> || obj[key] <span class="keyword">instanceof</span> <span class="built_in">Function</span>)&#123;</span><br><span class="line">                    <span class="comment">// 如果属性值是undefined, 该属性被忽略。忽略方法。</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">                    <span class="comment">// 如果属性值是数组</span></span><br><span class="line">                    result += <span class="string">"\""</span> + key + <span class="string">"\":["</span>;</span><br><span class="line">                    <span class="keyword">var</span> arr = obj[key];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> arr)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">typeof</span> arr[item] == <span class="string">"string"</span>)&#123;</span><br><span class="line">                            <span class="comment">// 如果数组项是String类型，需要加上双引号</span></span><br><span class="line">                            result += <span class="string">"\""</span> + arr[item] + <span class="string">"\","</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[item] <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>)&#123;</span><br><span class="line">                            <span class="comment">// 如果属数组项是正则表达式，只保留一对空大括号&#123;&#125;</span></span><br><span class="line">                            result += <span class="string">"&#123;&#125;,"</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr[item] == <span class="string">"undefined"</span> || arr[item] <span class="keyword">instanceof</span> <span class="built_in">Function</span>)&#123;</span><br><span class="line">                            <span class="comment">// 如果数组项是undefined, 则显示null。如果是函数，则显示null?。</span></span><br><span class="line">                            result += <span class="literal">null</span> +<span class="string">","</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[item] <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">                            <span class="comment">//如果数组项是对象(非正则，非函数，非null)，调用本函数处理</span></span><br><span class="line">                            result += <span class="keyword">this</span>.stringify(arr[item]) +<span class="string">","</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            result += arr[item] + <span class="string">","</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    result = result.slice(<span class="number">0</span>,<span class="number">-1</span>)+<span class="string">"],"</span></span><br><span class="line">      </span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">                    <span class="comment">// 如果属性值是对象(非null，非函数，非正则)，调用本函数处理</span></span><br><span class="line">                    result += <span class="string">"\""</span> + key + <span class="string">"\":"</span> + <span class="keyword">this</span>.stringify(obj[key]) + <span class="string">","</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result += <span class="string">"\""</span> + key + <span class="string">"\":"</span> + obj[key] + <span class="string">","</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 去除最后一个逗号,两边加&#123;&#125;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;"</span> + result.slice(<span class="number">0</span>,<span class="number">-1</span>) + <span class="string">"&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本课程为网易云课堂 - - 前端开发工程师 - - &lt;a href=&quot;http://mooc.study.163.com/course/NEU-1000054003#/info&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Ja
      
    
    </summary>
    
      <category term="Web前端" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://sophoraflower.github.io/EverQuest/categories/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://sophoraflower.github.io/EverQuest/tags/javascript/"/>
    
  </entry>
  
</feed>
